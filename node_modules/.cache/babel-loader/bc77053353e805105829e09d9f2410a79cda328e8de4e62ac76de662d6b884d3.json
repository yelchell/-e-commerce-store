{"ast":null,"code":"var _jsxFileName = \"D:\\\\assignment\\\\e_commerce\\\\ecommerce-product-page\\\\src\\\\pages\\\\productmanagement.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// import React, { useState } from 'react';\n// import Table from 'react-bootstrap/Table';\n// import Form from 'react-bootstrap/Form';\n// import InputGroup from 'react-bootstrap/InputGroup';\n// import Col from 'react-bootstrap/Col';\n// import Container from 'react-bootstrap/Container';\n// import Row from 'react-bootstrap/Row';\n// import Button from 'react-bootstrap/Button';\n// import { DndProvider, useDrag, useDrop } from 'react-dnd';\n// import { HTML5Backend } from 'react-dnd-html5-backend';\n// import ProductPickerDialog from '../components/productpicker';\n\n// const ItemType = {\n//     VARIANT: 'variant',\n// };\n\n// // Draggable Variant Component\n// const DraggableVariant = ({ variant, index, moveVariant, productIndex }) => {\n//     const [, ref] = useDrag({\n//         type: ItemType.VARIANT,\n//         item: { index, productIndex },\n//     });\n\n//     const [, drop] = useDrop({\n//         accept: ItemType.VARIANT,\n//         hover: (draggedItem) => {\n//             if (draggedItem.index !== index || draggedItem.productIndex !== productIndex) {\n//                 moveVariant(draggedItem.index, index, productIndex);\n//                 draggedItem.index = index; // Update the dragged item's index\n//             }\n//         },\n//     });\n\n//     return (\n//         <Row ref={(node) => ref(drop(node))} className=\"align-items-center mb-2\">\n//             <Col>\n//                 <Form.Control className=\"form-control\" value={variant.title} readOnly />\n//             </Col>\n//             <Col>\n//                 <Form.Control className=\"form-control\" value={`$${variant.price}`} readOnly />\n//             </Col>\n//         </Row>\n//     );\n// };\n\n// const ProductManagement = () => {\n//     const [showDialog, setShowDialog] = useState(false);\n//     const [selectedProducts, setSelectedProducts] = useState([]);\n//     const [editingIndex, setEditingIndex] = useState(null);\n//     const [variantVisibility, setVariantVisibility] = useState({}); // Track visibility of variants\n\n//     // Open dialog for adding or editing a product\n//     const handleOpenDialog = (index) => {\n//         setEditingIndex(index); // Set the index of the input being edited\n//         setShowDialog(true);\n//     };\n\n//     // Close the product picker dialog\n//     const handleCloseDialog = () => {\n//         setShowDialog(false);\n//         setEditingIndex(null); // Reset editing index\n//     };\n\n//     // Handle product and variant selection from the dialog\n//     const handleProductSelect = (products, variants) => {\n//         const selectedProduct = products[0]; // Assuming only one product is selected at a time\n//         const productWithVariants = {\n//             ...selectedProduct,\n//             variants: variants.filter((variant) => variant.product_id === selectedProduct.id),\n//         };\n\n//         setSelectedProducts((prev) => {\n//             const updatedProducts = [...prev];\n//             if (editingIndex !== null) {\n//                 // Update the specific input box that was edited\n//                 updatedProducts[editingIndex] = productWithVariants;\n//             } else {\n//                 // Add a new product if no specific index is being edited\n//                 updatedProducts.push(productWithVariants);\n//             }\n//             return updatedProducts;\n//         });\n\n//         // Reset the dialog states\n//         setShowDialog(false);\n//         setEditingIndex(null);\n//     };\n\n//     // Add a new input box for a product\n//     const handleAddProduct = () => {\n//         setSelectedProducts((prev) => [...prev, { id: null, title: '', variants: [] }]);\n//     };\n\n//     // Toggle variant visibility\n//     const toggleVariants = (index) => {\n//         setVariantVisibility((prev) => ({\n//             ...prev,\n//             [index]: !prev[index], // Toggle visibility for the specific product\n//         }));\n//     };\n\n//     // Move variants within the product\n//     const moveVariant = (fromIndex, toIndex, productIndex) => {\n//         setSelectedProducts((prev) => {\n//             const updatedProducts = [...prev];\n//             const variants = [...updatedProducts[productIndex].variants];\n//             const [movedVariant] = variants.splice(fromIndex, 1); // Remove the dragged variant\n//             variants.splice(toIndex, 0, movedVariant); // Insert it at the new position\n//             updatedProducts[productIndex].variants = variants;\n//             return updatedProducts;\n//         });\n//     };\n\n//     return (\n//         <DndProvider backend={HTML5Backend}>\n//             <Container>\n//                 <Table striped bordered hover>\n//                     <thead>\n//                         <tr>\n//                             <th>Product</th>\n//                             <th>Discount</th>\n//                         </tr>\n//                     </thead>\n//                     <tbody>\n//                         {selectedProducts.map((product, index) => (\n//                             <React.Fragment key={index}>\n//                                 {/* Product Input */}\n//                                 <tr>\n//                                     <td>\n//                                         <InputGroup className=\"mb-3\">\n//                                             <Form.Control\n//                                                 className=\"form-control-lg\"\n//                                                 value={product.title || 'Select Product'}\n//                                                 readOnly\n//                                                 placeholder=\"Select Product\"\n//                                                 onClick={() => handleOpenDialog(index)} // Open dialog for editing this product\n//                                             />\n//                                             <Button\n//                                                 variant=\"outline-secondary\"\n//                                                 onClick={() => handleOpenDialog(index)}\n//                                             >\n//                                                 Edit\n//                                             </Button>\n//                                         </InputGroup>\n//                                         <Button\n//                                             variant=\"link\"\n//                                             onClick={() => toggleVariants(index)} // Toggle variant visibility\n//                                         >\n//                                             {variantVisibility[index] ? 'Hide Variants' : 'Show Variants'}\n//                                         </Button>\n//                                     </td>\n//                                     <td>\n//                                         <Button variant=\"primary\">Add Discount</Button>\n//                                     </td>\n//                                 </tr>\n\n//                                 {/* Variants */}\n//                                 {variantVisibility[index] &&\n//                                     product.variants.map((variant, variantIndex) => (\n//                                         <tr key={variant.id}>\n//                                             <td colSpan=\"2\">\n//                                                 <DraggableVariant\n//                                                     variant={variant}\n//                                                     index={variantIndex}\n//                                                     moveVariant={moveVariant}\n//                                                     productIndex={index}\n//                                                 />\n//                                             </td>\n//                                         </tr>\n//                                     ))}\n//                             </React.Fragment>\n//                         ))}\n\n//                         {/* Add Product Button */}\n//                         <tr>\n//                             <td colSpan=\"2\">\n//                                 <Button variant=\"success\" onClick={handleAddProduct}>\n//                                     Add Product\n//                                 </Button>\n//                             </td>\n//                         </tr>\n//                     </tbody>\n//                 </Table>\n\n//                 <ProductPickerDialog\n//                     show={showDialog}\n//                     onClose={handleCloseDialog}\n//                     onProductSelect={handleProductSelect}\n//                 />\n//             </Container>\n//         </DndProvider>\n//     );\n// };\n\n// export default ProductManagement;\nimport React, { useState } from 'react';\nimport Table from 'react-bootstrap/Table';\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Button from 'react-bootstrap/Button';\nimport { DndProvider, useDrag, useDrop } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport ProductPickerDialog from '../components/productpicker';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ItemType = {\n  VARIANT: 'variant'\n};\n\n// Draggable Variant Component\nconst DraggableVariant = ({\n  variant,\n  index,\n  moveVariant,\n  productIndex\n}) => {\n  _s();\n  const [, ref] = useDrag({\n    type: ItemType.VARIANT,\n    item: {\n      index,\n      productIndex\n    }\n  });\n  const [, drop] = useDrop({\n    accept: ItemType.VARIANT,\n    hover: draggedItem => {\n      if (draggedItem.index !== index || draggedItem.productIndex !== productIndex) {\n        moveVariant(draggedItem.index, index, productIndex);\n        draggedItem.index = index; // Update the dragged item's index\n      }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(Row, {\n    ref: node => ref(drop(node)),\n    className: \"align-items-center mb-2\",\n    children: [/*#__PURE__*/_jsxDEV(Col, {\n      children: /*#__PURE__*/_jsxDEV(Form.Control, {\n        className: \"form-control\",\n        value: variant.title,\n        readOnly: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Col, {\n      children: /*#__PURE__*/_jsxDEV(Form.Control, {\n        className: \"form-control\",\n        value: `$${variant.price}`,\n        readOnly: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 233,\n    columnNumber: 9\n  }, this);\n};\n_s(DraggableVariant, \"lfwUUZEDJMc44yfEAkiAYOn1N4Y=\", false, function () {\n  return [useDrag, useDrop];\n});\n_c = DraggableVariant;\nconst ProductManagement = () => {\n  _s2();\n  const [showDialog, setShowDialog] = useState(false);\n  const [selectedProducts, setSelectedProducts] = useState([]);\n  const [editingIndex, setEditingIndex] = useState(null);\n  const [variantVisibility, setVariantVisibility] = useState({}); // Track visibility of variants\n  const [discountEdit, setDiscountEdit] = useState({}); // Track which product is being edited for discount\n\n  // Open dialog for adding or editing a product\n  const handleOpenDialog = index => {\n    setEditingIndex(index); // Set the index of the input being edited\n    setShowDialog(true);\n  };\n\n  // Close the product picker dialog\n  const handleCloseDialog = () => {\n    setShowDialog(false);\n    setEditingIndex(null); // Reset editing index\n  };\n\n  // Handle product and variant selection from the dialog\n  const handleProductSelect = (products, variants) => {\n    const selectedProduct = products[0]; // Assuming only one product is selected at a time\n    const productWithVariants = {\n      ...selectedProduct,\n      variants: variants.filter(variant => variant.product_id === selectedProduct.id)\n    };\n    setSelectedProducts(prev => {\n      const updatedProducts = [...prev];\n      if (editingIndex !== null) {\n        // Update the specific input box that was edited\n        updatedProducts[editingIndex] = productWithVariants;\n      } else {\n        // Add a new product if no specific index is being edited\n        updatedProducts.push(productWithVariants);\n      }\n      return updatedProducts;\n    });\n\n    // Reset the dialog states\n    setShowDialog(false);\n    setEditingIndex(null);\n  };\n\n  // Add a new input box for a product\n  const handleAddProduct = () => {\n    setSelectedProducts(prev => [...prev, {\n      id: null,\n      title: '',\n      variants: [],\n      discount: null\n    }]);\n  };\n\n  // Toggle variant visibility\n  const toggleVariants = index => {\n    setVariantVisibility(prev => ({\n      ...prev,\n      [index]: !prev[index] // Toggle visibility for the specific product\n    }));\n  };\n\n  // Move variants within the product\n  const moveVariant = (fromIndex, toIndex, productIndex) => {\n    setSelectedProducts(prev => {\n      const updatedProducts = [...prev];\n      const variants = [...updatedProducts[productIndex].variants];\n      const [movedVariant] = variants.splice(fromIndex, 1); // Remove the dragged variant\n      variants.splice(toIndex, 0, movedVariant); // Insert it at the new position\n      updatedProducts[productIndex].variants = variants;\n      return updatedProducts;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(DndProvider, {\n    backend: HTML5Backend,\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(Table, {\n        striped: true,\n        bordered: true,\n        hover: true,\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Product\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 319,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Discount\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 320,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: [selectedProducts.map((product, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: [/*#__PURE__*/_jsxDEV(InputGroup, {\n                  className: \"mb-3\",\n                  children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n                    className: \"form-control-lg\",\n                    value: product.title || 'Select Product',\n                    readOnly: true,\n                    placeholder: \"Select Product\",\n                    onClick: () => handleOpenDialog(index) // Open dialog for editing this product\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 330,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(Button, {\n                    variant: \"outline-secondary\",\n                    onClick: () => handleOpenDialog(index),\n                    children: \"Edit\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 337,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 329,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"link\",\n                  onClick: () => toggleVariants(index) // Toggle variant visibility\n                  ,\n                  children: variantVisibility[index] ? 'Hide Variants' : 'Show Variants'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 344,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 328,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: discountEdit[index] ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n                    type: \"number\",\n                    placeholder: \"Discount Value\",\n                    className: \"mb-2\",\n                    onChange: e => {\n                      const value = e.target.value;\n                      setSelectedProducts(prev => {\n                        const updatedProducts = [...prev];\n                        updatedProducts[index].discountValue = value;\n                        return updatedProducts;\n                      });\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 354,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Select, {\n                    onChange: e => {\n                      const type = e.target.value;\n                      setSelectedProducts(prev => {\n                        const updatedProducts = [...prev];\n                        updatedProducts[index].discountType = type;\n                        return updatedProducts;\n                      });\n                    },\n                    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"percentage\",\n                      children: \"%\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 377,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"flat\",\n                      children: \"Flat\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 378,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 367,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true) : /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"primary\",\n                  onClick: () => setDiscountEdit(prev => ({\n                    ...prev,\n                    [index]: true\n                  })),\n                  children: \"Add Discount\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 382,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 351,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 327,\n              columnNumber: 33\n            }, this), variantVisibility[index] && product.variants.map((variant, variantIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: /*#__PURE__*/_jsxDEV(\"td\", {\n                colSpan: \"2\",\n                children: /*#__PURE__*/_jsxDEV(DraggableVariant, {\n                  variant: variant,\n                  index: variantIndex,\n                  moveVariant: moveVariant,\n                  productIndex: index\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 402,\n                  columnNumber: 49\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 401,\n                columnNumber: 45\n              }, this)\n            }, variant.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 400,\n              columnNumber: 41\n            }, this))]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 29\n          }, this)), /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: /*#__PURE__*/_jsxDEV(\"td\", {\n              colSpan: \"2\",\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"success\",\n                onClick: handleAddProduct,\n                children: \"Add Product\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 417,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 416,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 415,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ProductPickerDialog, {\n        show: showDialog,\n        onClose: handleCloseDialog,\n        onProductSelect: handleProductSelect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 314,\n    columnNumber: 9\n  }, this);\n};\n_s2(ProductManagement, \"sQYXsHmKpGOBwIQiM8/IbOoWIVA=\");\n_c2 = ProductManagement;\nexport default ProductManagement;\nvar _c, _c2;\n$RefreshReg$(_c, \"DraggableVariant\");\n$RefreshReg$(_c2, \"ProductManagement\");","map":{"version":3,"names":["React","useState","Table","Form","InputGroup","Col","Container","Row","Button","DndProvider","useDrag","useDrop","HTML5Backend","ProductPickerDialog","jsxDEV","_jsxDEV","Fragment","_Fragment","ItemType","VARIANT","DraggableVariant","variant","index","moveVariant","productIndex","_s","ref","type","item","drop","accept","hover","draggedItem","node","className","children","Control","value","title","readOnly","fileName","_jsxFileName","lineNumber","columnNumber","price","_c","ProductManagement","_s2","showDialog","setShowDialog","selectedProducts","setSelectedProducts","editingIndex","setEditingIndex","variantVisibility","setVariantVisibility","discountEdit","setDiscountEdit","handleOpenDialog","handleCloseDialog","handleProductSelect","products","variants","selectedProduct","productWithVariants","filter","product_id","id","prev","updatedProducts","push","handleAddProduct","discount","toggleVariants","fromIndex","toIndex","movedVariant","splice","backend","striped","bordered","map","product","placeholder","onClick","onChange","e","target","discountValue","Select","discountType","variantIndex","colSpan","show","onClose","onProductSelect","_c2","$RefreshReg$"],"sources":["D:/assignment/e_commerce/ecommerce-product-page/src/pages/productmanagement.js"],"sourcesContent":["\r\n\r\n\r\n// import React, { useState } from 'react';\r\n// import Table from 'react-bootstrap/Table';\r\n// import Form from 'react-bootstrap/Form';\r\n// import InputGroup from 'react-bootstrap/InputGroup';\r\n// import Col from 'react-bootstrap/Col';\r\n// import Container from 'react-bootstrap/Container';\r\n// import Row from 'react-bootstrap/Row';\r\n// import Button from 'react-bootstrap/Button';\r\n// import { DndProvider, useDrag, useDrop } from 'react-dnd';\r\n// import { HTML5Backend } from 'react-dnd-html5-backend';\r\n// import ProductPickerDialog from '../components/productpicker';\r\n\r\n// const ItemType = {\r\n//     VARIANT: 'variant',\r\n// };\r\n\r\n// // Draggable Variant Component\r\n// const DraggableVariant = ({ variant, index, moveVariant, productIndex }) => {\r\n//     const [, ref] = useDrag({\r\n//         type: ItemType.VARIANT,\r\n//         item: { index, productIndex },\r\n//     });\r\n\r\n//     const [, drop] = useDrop({\r\n//         accept: ItemType.VARIANT,\r\n//         hover: (draggedItem) => {\r\n//             if (draggedItem.index !== index || draggedItem.productIndex !== productIndex) {\r\n//                 moveVariant(draggedItem.index, index, productIndex);\r\n//                 draggedItem.index = index; // Update the dragged item's index\r\n//             }\r\n//         },\r\n//     });\r\n\r\n//     return (\r\n//         <Row ref={(node) => ref(drop(node))} className=\"align-items-center mb-2\">\r\n//             <Col>\r\n//                 <Form.Control className=\"form-control\" value={variant.title} readOnly />\r\n//             </Col>\r\n//             <Col>\r\n//                 <Form.Control className=\"form-control\" value={`$${variant.price}`} readOnly />\r\n//             </Col>\r\n//         </Row>\r\n//     );\r\n// };\r\n\r\n// const ProductManagement = () => {\r\n//     const [showDialog, setShowDialog] = useState(false);\r\n//     const [selectedProducts, setSelectedProducts] = useState([]);\r\n//     const [editingIndex, setEditingIndex] = useState(null);\r\n//     const [variantVisibility, setVariantVisibility] = useState({}); // Track visibility of variants\r\n\r\n//     // Open dialog for adding or editing a product\r\n//     const handleOpenDialog = (index) => {\r\n//         setEditingIndex(index); // Set the index of the input being edited\r\n//         setShowDialog(true);\r\n//     };\r\n\r\n//     // Close the product picker dialog\r\n//     const handleCloseDialog = () => {\r\n//         setShowDialog(false);\r\n//         setEditingIndex(null); // Reset editing index\r\n//     };\r\n\r\n//     // Handle product and variant selection from the dialog\r\n//     const handleProductSelect = (products, variants) => {\r\n//         const selectedProduct = products[0]; // Assuming only one product is selected at a time\r\n//         const productWithVariants = {\r\n//             ...selectedProduct,\r\n//             variants: variants.filter((variant) => variant.product_id === selectedProduct.id),\r\n//         };\r\n\r\n//         setSelectedProducts((prev) => {\r\n//             const updatedProducts = [...prev];\r\n//             if (editingIndex !== null) {\r\n//                 // Update the specific input box that was edited\r\n//                 updatedProducts[editingIndex] = productWithVariants;\r\n//             } else {\r\n//                 // Add a new product if no specific index is being edited\r\n//                 updatedProducts.push(productWithVariants);\r\n//             }\r\n//             return updatedProducts;\r\n//         });\r\n\r\n//         // Reset the dialog states\r\n//         setShowDialog(false);\r\n//         setEditingIndex(null);\r\n//     };\r\n\r\n//     // Add a new input box for a product\r\n//     const handleAddProduct = () => {\r\n//         setSelectedProducts((prev) => [...prev, { id: null, title: '', variants: [] }]);\r\n//     };\r\n\r\n//     // Toggle variant visibility\r\n//     const toggleVariants = (index) => {\r\n//         setVariantVisibility((prev) => ({\r\n//             ...prev,\r\n//             [index]: !prev[index], // Toggle visibility for the specific product\r\n//         }));\r\n//     };\r\n\r\n//     // Move variants within the product\r\n//     const moveVariant = (fromIndex, toIndex, productIndex) => {\r\n//         setSelectedProducts((prev) => {\r\n//             const updatedProducts = [...prev];\r\n//             const variants = [...updatedProducts[productIndex].variants];\r\n//             const [movedVariant] = variants.splice(fromIndex, 1); // Remove the dragged variant\r\n//             variants.splice(toIndex, 0, movedVariant); // Insert it at the new position\r\n//             updatedProducts[productIndex].variants = variants;\r\n//             return updatedProducts;\r\n//         });\r\n//     };\r\n\r\n//     return (\r\n//         <DndProvider backend={HTML5Backend}>\r\n//             <Container>\r\n//                 <Table striped bordered hover>\r\n//                     <thead>\r\n//                         <tr>\r\n//                             <th>Product</th>\r\n//                             <th>Discount</th>\r\n//                         </tr>\r\n//                     </thead>\r\n//                     <tbody>\r\n//                         {selectedProducts.map((product, index) => (\r\n//                             <React.Fragment key={index}>\r\n//                                 {/* Product Input */}\r\n//                                 <tr>\r\n//                                     <td>\r\n//                                         <InputGroup className=\"mb-3\">\r\n//                                             <Form.Control\r\n//                                                 className=\"form-control-lg\"\r\n//                                                 value={product.title || 'Select Product'}\r\n//                                                 readOnly\r\n//                                                 placeholder=\"Select Product\"\r\n//                                                 onClick={() => handleOpenDialog(index)} // Open dialog for editing this product\r\n//                                             />\r\n//                                             <Button\r\n//                                                 variant=\"outline-secondary\"\r\n//                                                 onClick={() => handleOpenDialog(index)}\r\n//                                             >\r\n//                                                 Edit\r\n//                                             </Button>\r\n//                                         </InputGroup>\r\n//                                         <Button\r\n//                                             variant=\"link\"\r\n//                                             onClick={() => toggleVariants(index)} // Toggle variant visibility\r\n//                                         >\r\n//                                             {variantVisibility[index] ? 'Hide Variants' : 'Show Variants'}\r\n//                                         </Button>\r\n//                                     </td>\r\n//                                     <td>\r\n//                                         <Button variant=\"primary\">Add Discount</Button>\r\n//                                     </td>\r\n//                                 </tr>\r\n\r\n//                                 {/* Variants */}\r\n//                                 {variantVisibility[index] &&\r\n//                                     product.variants.map((variant, variantIndex) => (\r\n//                                         <tr key={variant.id}>\r\n//                                             <td colSpan=\"2\">\r\n//                                                 <DraggableVariant\r\n//                                                     variant={variant}\r\n//                                                     index={variantIndex}\r\n//                                                     moveVariant={moveVariant}\r\n//                                                     productIndex={index}\r\n//                                                 />\r\n//                                             </td>\r\n//                                         </tr>\r\n//                                     ))}\r\n//                             </React.Fragment>\r\n//                         ))}\r\n\r\n//                         {/* Add Product Button */}\r\n//                         <tr>\r\n//                             <td colSpan=\"2\">\r\n//                                 <Button variant=\"success\" onClick={handleAddProduct}>\r\n//                                     Add Product\r\n//                                 </Button>\r\n//                             </td>\r\n//                         </tr>\r\n//                     </tbody>\r\n//                 </Table>\r\n\r\n//                 <ProductPickerDialog\r\n//                     show={showDialog}\r\n//                     onClose={handleCloseDialog}\r\n//                     onProductSelect={handleProductSelect}\r\n//                 />\r\n//             </Container>\r\n//         </DndProvider>\r\n//     );\r\n// };\r\n\r\n// export default ProductManagement;\r\nimport React, { useState } from 'react';\r\nimport Table from 'react-bootstrap/Table';\r\nimport Form from 'react-bootstrap/Form';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { DndProvider, useDrag, useDrop } from 'react-dnd';\r\nimport { HTML5Backend } from 'react-dnd-html5-backend';\r\nimport ProductPickerDialog from '../components/productpicker';\r\n\r\nconst ItemType = {\r\n    VARIANT: 'variant',\r\n};\r\n\r\n// Draggable Variant Component\r\nconst DraggableVariant = ({ variant, index, moveVariant, productIndex }) => {\r\n    const [, ref] = useDrag({\r\n        type: ItemType.VARIANT,\r\n        item: { index, productIndex },\r\n    });\r\n\r\n    const [, drop] = useDrop({\r\n        accept: ItemType.VARIANT,\r\n        hover: (draggedItem) => {\r\n            if (draggedItem.index !== index || draggedItem.productIndex !== productIndex) {\r\n                moveVariant(draggedItem.index, index, productIndex);\r\n                draggedItem.index = index; // Update the dragged item's index\r\n            }\r\n        },\r\n    });\r\n\r\n    return (\r\n        <Row ref={(node) => ref(drop(node))} className=\"align-items-center mb-2\">\r\n            <Col>\r\n                <Form.Control className=\"form-control\" value={variant.title} readOnly />\r\n            </Col>\r\n            <Col>\r\n                <Form.Control className=\"form-control\" value={`$${variant.price}`} readOnly />\r\n            </Col>\r\n        </Row>\r\n    );\r\n};\r\n\r\nconst ProductManagement = () => {\r\n    const [showDialog, setShowDialog] = useState(false);\r\n    const [selectedProducts, setSelectedProducts] = useState([]);\r\n    const [editingIndex, setEditingIndex] = useState(null);\r\n    const [variantVisibility, setVariantVisibility] = useState({}); // Track visibility of variants\r\n    const [discountEdit, setDiscountEdit] = useState({}); // Track which product is being edited for discount\r\n\r\n    // Open dialog for adding or editing a product\r\n    const handleOpenDialog = (index) => {\r\n        setEditingIndex(index); // Set the index of the input being edited\r\n        setShowDialog(true);\r\n    };\r\n\r\n    // Close the product picker dialog\r\n    const handleCloseDialog = () => {\r\n        setShowDialog(false);\r\n        setEditingIndex(null); // Reset editing index\r\n    };\r\n\r\n    // Handle product and variant selection from the dialog\r\n    const handleProductSelect = (products, variants) => {\r\n        const selectedProduct = products[0]; // Assuming only one product is selected at a time\r\n        const productWithVariants = {\r\n            ...selectedProduct,\r\n            variants: variants.filter((variant) => variant.product_id === selectedProduct.id),\r\n        };\r\n\r\n        setSelectedProducts((prev) => {\r\n            const updatedProducts = [...prev];\r\n            if (editingIndex !== null) {\r\n                // Update the specific input box that was edited\r\n                updatedProducts[editingIndex] = productWithVariants;\r\n            } else {\r\n                // Add a new product if no specific index is being edited\r\n                updatedProducts.push(productWithVariants);\r\n            }\r\n            return updatedProducts;\r\n        });\r\n\r\n        // Reset the dialog states\r\n        setShowDialog(false);\r\n        setEditingIndex(null);\r\n    };\r\n\r\n    // Add a new input box for a product\r\n    const handleAddProduct = () => {\r\n        setSelectedProducts((prev) => [...prev, { id: null, title: '', variants: [], discount: null }]);\r\n    };\r\n\r\n    // Toggle variant visibility\r\n    const toggleVariants = (index) => {\r\n        setVariantVisibility((prev) => ({\r\n            ...prev,\r\n            [index]: !prev[index], // Toggle visibility for the specific product\r\n        }));\r\n    };\r\n\r\n    // Move variants within the product\r\n    const moveVariant = (fromIndex, toIndex, productIndex) => {\r\n        setSelectedProducts((prev) => {\r\n            const updatedProducts = [...prev];\r\n            const variants = [...updatedProducts[productIndex].variants];\r\n            const [movedVariant] = variants.splice(fromIndex, 1); // Remove the dragged variant\r\n            variants.splice(toIndex, 0, movedVariant); // Insert it at the new position\r\n            updatedProducts[productIndex].variants = variants;\r\n            return updatedProducts;\r\n        });\r\n    };\r\n\r\n    return (\r\n        <DndProvider backend={HTML5Backend}>\r\n            <Container>\r\n                <Table striped bordered hover>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Product</th>\r\n                            <th>Discount</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {selectedProducts.map((product, index) => (\r\n                            <React.Fragment key={index}>\r\n                                {/* Product Input */}\r\n                                <tr>\r\n                                    <td>\r\n                                        <InputGroup className=\"mb-3\">\r\n                                            <Form.Control\r\n                                                className=\"form-control-lg\"\r\n                                                value={product.title || 'Select Product'}\r\n                                                readOnly\r\n                                                placeholder=\"Select Product\"\r\n                                                onClick={() => handleOpenDialog(index)} // Open dialog for editing this product\r\n                                            />\r\n                                            <Button\r\n                                                variant=\"outline-secondary\"\r\n                                                onClick={() => handleOpenDialog(index)}\r\n                                            >\r\n                                                Edit\r\n                                            </Button>\r\n                                        </InputGroup>\r\n                                        <Button\r\n                                            variant=\"link\"\r\n                                            onClick={() => toggleVariants(index)} // Toggle variant visibility\r\n                                        >\r\n                                            {variantVisibility[index] ? 'Hide Variants' : 'Show Variants'}\r\n                                        </Button>\r\n                                    </td>\r\n                                    <td>\r\n                                        {discountEdit[index] ? (\r\n                                            <>\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    placeholder=\"Discount Value\"\r\n                                                    className=\"mb-2\"\r\n                                                    onChange={(e) => {\r\n                                                        const value = e.target.value;\r\n                                                        setSelectedProducts((prev) => {\r\n                                                            const updatedProducts = [...prev];\r\n                                                            updatedProducts[index].discountValue = value;\r\n                                                            return updatedProducts;\r\n                                                        });\r\n                                                    }}\r\n                                                />\r\n                                                <Form.Select\r\n                                                    onChange={(e) => {\r\n                                                        const type = e.target.value;\r\n                                                        setSelectedProducts((prev) => {\r\n                                                            const updatedProducts = [...prev];\r\n                                                            updatedProducts[index].discountType = type;\r\n                                                            return updatedProducts;\r\n                                                        });\r\n                                                    }}\r\n                                                >\r\n                                                    <option value=\"percentage\">%</option>\r\n                                                    <option value=\"flat\">Flat</option>\r\n                                                </Form.Select>\r\n                                            </>\r\n                                        ) : (\r\n                                            <Button\r\n                                                variant=\"primary\"\r\n                                                onClick={() =>\r\n                                                    setDiscountEdit((prev) => ({\r\n                                                        ...prev,\r\n                                                        [index]: true,\r\n                                                    }))\r\n                                                }\r\n                                            >\r\n                                                Add Discount\r\n                                            </Button>\r\n                                        )}\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                {/* Variants */}\r\n                                {variantVisibility[index] &&\r\n                                    product.variants.map((variant, variantIndex) => (\r\n                                        <tr key={variant.id}>\r\n                                            <td colSpan=\"2\">\r\n                                                <DraggableVariant\r\n                                                    variant={variant}\r\n                                                    index={variantIndex}\r\n                                                    moveVariant={moveVariant}\r\n                                                    productIndex={index}\r\n                                                />\r\n                                            </td>\r\n                                        </tr>\r\n                                    ))}\r\n                            </React.Fragment>\r\n                        ))}\r\n\r\n                        {/* Add Product Button */}\r\n                        <tr>\r\n                            <td colSpan=\"2\">\r\n                                <Button variant=\"success\" onClick={handleAddProduct}>\r\n                                    Add Product\r\n                                </Button>\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </Table>\r\n\r\n                <ProductPickerDialog\r\n                    show={showDialog}\r\n                    onClose={handleCloseDialog}\r\n                    onProductSelect={handleProductSelect}\r\n                />\r\n            </Container>\r\n        </DndProvider>\r\n    );\r\n};\r\n\r\nexport default ProductManagement;\r\n"],"mappings":";;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,uBAAuB;AACzC,OAAOC,IAAI,MAAM,sBAAsB;AACvC,OAAOC,UAAU,MAAM,4BAA4B;AACnD,OAAOC,GAAG,MAAM,qBAAqB;AACrC,OAAOC,SAAS,MAAM,2BAA2B;AACjD,OAAOC,GAAG,MAAM,qBAAqB;AACrC,OAAOC,MAAM,MAAM,wBAAwB;AAC3C,SAASC,WAAW,EAAEC,OAAO,EAAEC,OAAO,QAAQ,WAAW;AACzD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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}