{"ast":null,"code":"/* eslint @typescript-eslint/no-explicit-any: off */\n// symbols\nconst TRACK_MEMO_SYMBOL = Symbol();\nconst GET_ORIGINAL_SYMBOL = Symbol();\n// properties\nconst AFFECTED_PROPERTY = 'a';\nconst IS_TARGET_COPIED_PROPERTY = 'f';\nconst PROXY_PROPERTY = 'p';\nconst PROXY_CACHE_PROPERTY = 'c';\nconst TARGET_CACHE_PROPERTY = 't';\nconst NEXT_OBJECT_PROPERTY = 'n';\nconst CHANGED_PROPERTY = 'g';\nconst HAS_KEY_PROPERTY = 'h';\nconst ALL_OWN_KEYS_PROPERTY = 'w';\nconst HAS_OWN_KEY_PROPERTY = 'o';\nconst KEYS_PROPERTY = 'k';\n// function to create a new bare proxy\nlet newProxy = (target, handler) => new Proxy(target, handler);\n// get object prototype\nconst getProto = Object.getPrototypeOf;\nconst objectsToTrack = new WeakMap();\n// check if obj is a plain object or an array\nconst isObjectToTrack = obj => obj && (objectsToTrack.has(obj) ? objectsToTrack.get(obj) : getProto(obj) === Object.prototype || getProto(obj) === Array.prototype);\n// check if it is object\nconst isObject = x => typeof x === 'object' && x !== null;\n// Properties that are both non-configurable and non-writable will break\n// the proxy get trap when we try to return a recursive/child compare proxy\n// from them. We can avoid this by making a copy of the target object with\n// all descriptors marked as configurable, see `copyTargetObject`.\n// See: https://github.com/dai-shi/proxy-compare/pull/8\nconst needsToCopyTargetObject = obj => Object.values(Object.getOwnPropertyDescriptors(obj)).some(descriptor => !descriptor.configurable && !descriptor.writable);\n// Make a copy with all descriptors marked as configurable.\nconst copyTargetObject = obj => {\n  if (Array.isArray(obj)) {\n    // Arrays need a special way to copy\n    return Array.from(obj);\n  }\n  // For non-array objects, we create a new object keeping the prototype\n  // with changing all configurable options (otherwise, proxies will complain)\n  const descriptors = Object.getOwnPropertyDescriptors(obj);\n  Object.values(descriptors).forEach(desc => {\n    desc.configurable = true;\n  });\n  return Object.create(getProto(obj), descriptors);\n};\nconst createProxyHandler = (origObj, isTargetCopied) => {\n  const state = {\n    [IS_TARGET_COPIED_PROPERTY]: isTargetCopied\n  };\n  let trackObject = false; // for trackMemo\n  const recordUsage = (type, key) => {\n    if (!trackObject) {\n      let used = state[AFFECTED_PROPERTY].get(origObj);\n      if (!used) {\n        used = {};\n        state[AFFECTED_PROPERTY].set(origObj, used);\n      }\n      if (type === ALL_OWN_KEYS_PROPERTY) {\n        used[ALL_OWN_KEYS_PROPERTY] = true;\n      } else {\n        let set = used[type];\n        if (!set) {\n          set = new Set();\n          used[type] = set;\n        }\n        set.add(key);\n      }\n    }\n  };\n  const recordObjectAsUsed = () => {\n    trackObject = true;\n    state[AFFECTED_PROPERTY].delete(origObj);\n  };\n  const handler = {\n    get(target, key) {\n      if (key === GET_ORIGINAL_SYMBOL) {\n        return origObj;\n      }\n      recordUsage(KEYS_PROPERTY, key);\n      return createProxy(Reflect.get(target, key), state[AFFECTED_PROPERTY], state[PROXY_CACHE_PROPERTY], state[TARGET_CACHE_PROPERTY]);\n    },\n    has(target, key) {\n      if (key === TRACK_MEMO_SYMBOL) {\n        recordObjectAsUsed();\n        return true;\n      }\n      recordUsage(HAS_KEY_PROPERTY, key);\n      return Reflect.has(target, key);\n    },\n    getOwnPropertyDescriptor(target, key) {\n      recordUsage(HAS_OWN_KEY_PROPERTY, key);\n      return Reflect.getOwnPropertyDescriptor(target, key);\n    },\n    ownKeys(target) {\n      recordUsage(ALL_OWN_KEYS_PROPERTY);\n      return Reflect.ownKeys(target);\n    }\n  };\n  if (isTargetCopied) {\n    handler.set = handler.deleteProperty = () => false;\n  }\n  return [handler, state];\n};\nconst getOriginalObject = obj =>\n// unwrap proxy\nobj[GET_ORIGINAL_SYMBOL] ||\n// otherwise\nobj;\n/**\n * Create a proxy.\n *\n * This function will create a proxy at top level and proxy nested objects as you access them,\n * in order to keep track of which properties were accessed via get/has proxy handlers:\n *\n * NOTE: Printing of WeakMap is hard to inspect and not very readable\n * for this purpose you can use the `affectedToPathList` helper.\n *\n * @param {object} obj - Object that will be wrapped on the proxy.\n * @param {WeakMap<object, unknown>} affected -\n * WeakMap that will hold the tracking of which properties in the proxied object were accessed.\n * @param {WeakMap<object, unknown>} [proxyCache] -\n * WeakMap that will help keep referential identity for proxies.\n * @returns {Proxy<object>} - Object wrapped in a proxy.\n *\n * @example\n * import { createProxy } from 'proxy-compare';\n *\n * const original = { a: \"1\", c: \"2\", d: { e: \"3\" } };\n * const affected = new WeakMap();\n * const proxy = createProxy(original, affected);\n *\n * proxy.a // Will mark as used and track its value.\n * // This will update the affected WeakMap with original as key\n * // and a Set with \"a\"\n *\n * proxy.d // Will mark \"d\" as accessed to track and proxy itself ({ e: \"3\" }).\n * // This will update the affected WeakMap with original as key\n * // and a Set with \"d\"\n */\nexport const createProxy = (obj, affected, proxyCache, targetCache) => {\n  if (!isObjectToTrack(obj)) return obj;\n  let targetAndCopied = targetCache && targetCache.get(obj);\n  if (!targetAndCopied) {\n    const target = getOriginalObject(obj);\n    if (needsToCopyTargetObject(target)) {\n      targetAndCopied = [target, copyTargetObject(target)];\n    } else {\n      targetAndCopied = [target];\n    }\n    targetCache === null || targetCache === void 0 ? void 0 : targetCache.set(obj, targetAndCopied);\n  }\n  const [target, copiedTarget] = targetAndCopied;\n  let handlerAndState = proxyCache && proxyCache.get(target);\n  if (!handlerAndState || handlerAndState[1][IS_TARGET_COPIED_PROPERTY] !== !!copiedTarget) {\n    handlerAndState = createProxyHandler(target, !!copiedTarget);\n    handlerAndState[1][PROXY_PROPERTY] = newProxy(copiedTarget || target, handlerAndState[0]);\n    if (proxyCache) {\n      proxyCache.set(target, handlerAndState);\n    }\n  }\n  handlerAndState[1][AFFECTED_PROPERTY] = affected;\n  handlerAndState[1][PROXY_CACHE_PROPERTY] = proxyCache;\n  handlerAndState[1][TARGET_CACHE_PROPERTY] = targetCache;\n  return handlerAndState[1][PROXY_PROPERTY];\n};\nconst isAllOwnKeysChanged = (prevObj, nextObj) => {\n  const prevKeys = Reflect.ownKeys(prevObj);\n  const nextKeys = Reflect.ownKeys(nextObj);\n  return prevKeys.length !== nextKeys.length || prevKeys.some((k, i) => k !== nextKeys[i]);\n};\n/**\n * Compare changes on objects.\n *\n * This will compare the affected properties on tracked objects inside the proxy\n * to check if there were any changes made to it,\n * by default if no property was accessed on the proxy it will attempt to do a\n * reference equality check for the objects provided (Object.is(a, b)). If you access a property\n * on the proxy, then isChanged will only compare the affected properties.\n *\n * @param {object} prevObj - The previous object to compare.\n * @param {object} nextObj - Object to compare with the previous one.\n * @param {WeakMap<object, unknown>} affected -\n * WeakMap that holds the tracking of which properties in the proxied object were accessed.\n * @param {WeakMap<object, unknown>} [cache] -\n * WeakMap that holds a cache of the comparisons for better performance with repetitive comparisons,\n * and to avoid infinite loop with circular structures.\n * @returns {boolean} - Boolean indicating if the affected property on the object has changed.\n *\n * @example\n * import { createProxy, isChanged } from 'proxy-compare';\n *\n * const obj = { a: \"1\", c: \"2\", d: { e: \"3\" } };\n * const affected = new WeakMap();\n *\n * const proxy = createProxy(obj, affected);\n *\n * proxy.a\n *\n * isChanged(obj, { a: \"1\" }, affected) // false\n *\n * proxy.a = \"2\"\n *\n * isChanged(obj, { a: \"1\" }, affected) // true\n */\nexport const isChanged = (prevObj, nextObj, affected, cache, isEqual = Object.is) => {\n  if (isEqual(prevObj, nextObj)) {\n    return false;\n  }\n  if (!isObject(prevObj) || !isObject(nextObj)) return true;\n  const used = affected.get(getOriginalObject(prevObj));\n  if (!used) return true;\n  if (cache) {\n    const hit = cache.get(prevObj);\n    if (hit && hit[NEXT_OBJECT_PROPERTY] === nextObj) {\n      return hit[CHANGED_PROPERTY];\n    }\n    // for object with cycles\n    cache.set(prevObj, {\n      [NEXT_OBJECT_PROPERTY]: nextObj,\n      [CHANGED_PROPERTY]: false\n    });\n  }\n  let changed = null;\n  try {\n    for (const key of used[HAS_KEY_PROPERTY] || []) {\n      changed = Reflect.has(prevObj, key) !== Reflect.has(nextObj, key);\n      if (changed) return changed;\n    }\n    if (used[ALL_OWN_KEYS_PROPERTY] === true) {\n      changed = isAllOwnKeysChanged(prevObj, nextObj);\n      if (changed) return changed;\n    } else {\n      for (const key of used[HAS_OWN_KEY_PROPERTY] || []) {\n        const hasPrev = !!Reflect.getOwnPropertyDescriptor(prevObj, key);\n        const hasNext = !!Reflect.getOwnPropertyDescriptor(nextObj, key);\n        changed = hasPrev !== hasNext;\n        if (changed) return changed;\n      }\n    }\n    for (const key of used[KEYS_PROPERTY] || []) {\n      changed = isChanged(prevObj[key], nextObj[key], affected, cache, isEqual);\n      if (changed) return changed;\n    }\n    if (changed === null) changed = true;\n    return changed;\n  } finally {\n    if (cache) {\n      cache.set(prevObj, {\n        [NEXT_OBJECT_PROPERTY]: nextObj,\n        [CHANGED_PROPERTY]: changed\n      });\n    }\n  }\n};\n// explicitly track object with memo\nexport const trackMemo = obj => {\n  if (isObjectToTrack(obj)) {\n    return TRACK_MEMO_SYMBOL in obj;\n  }\n  return false;\n};\n/**\n * Unwrap proxy to get the original object.\n *\n * Used to retrieve the original object used to create the proxy instance with `createProxy`.\n *\n * @param {Proxy<object>} obj -  The proxy wrapper of the originial object.\n * @returns {object | null} - Return either the unwrapped object if exists.\n *\n * @example\n * import { createProxy, getUntracked } from 'proxy-compare';\n *\n * const original = { a: \"1\", c: \"2\", d: { e: \"3\" } };\n * const affected = new WeakMap();\n *\n * const proxy = createProxy(original, affected);\n * const originalFromProxy = getUntracked(proxy)\n *\n * Object.is(original, originalFromProxy) // true\n * isChanged(original, originalFromProxy, affected) // false\n */\nexport const getUntracked = obj => {\n  if (isObjectToTrack(obj)) {\n    return obj[GET_ORIGINAL_SYMBOL] || null;\n  }\n  return null;\n};\n/**\n * Mark object to be tracked.\n *\n * This function marks an object that will be passed into `createProxy`\n * as marked to track or not. By default only Array and Object are marked to track,\n * so this is useful for example to mark a class instance to track or to mark a object\n * to be untracked when creating your proxy.\n *\n * @param obj - Object to mark as tracked or not.\n * @param mark - Boolean indicating whether you want to track this object or not.\n * @returns - No return.\n *\n * @example\n * import { createProxy, markToTrack, isChanged } from 'proxy-compare';\n *\n * const nested = { e: \"3\" }\n *\n * markToTrack(nested, false)\n *\n * const original = { a: \"1\", c: \"2\", d: nested };\n * const affected = new WeakMap();\n *\n * const proxy = createProxy(original, affected);\n *\n * proxy.d.e\n *\n * isChanged(original, { d: { e: \"3\" } }, affected) // true\n */\nexport const markToTrack = (obj, mark = true) => {\n  objectsToTrack.set(obj, mark);\n};\n/**\n * Convert `affected` to path list\n *\n * `affected` is a weak map which is not printable.\n * This function is can convert it to printable path list.\n * It's for debugging purpose.\n *\n * @param obj - An object that is used with `createProxy`.\n * @param affected - A weak map that is used with `createProxy`.\n * @param onlyWithValues - An optional boolean to exclude object getters.\n * @returns - An array of paths.\n */\nexport const affectedToPathList = (obj, affected, onlyWithValues) => {\n  const list = [];\n  const seen = new WeakSet();\n  const walk = (x, path) => {\n    var _a, _b, _c;\n    if (seen.has(x)) {\n      // for object with cycles\n      return;\n    }\n    if (isObject(x)) {\n      seen.add(x);\n    }\n    const used = isObject(x) && affected.get(getOriginalObject(x));\n    if (used) {\n      (_a = used[HAS_KEY_PROPERTY]) === null || _a === void 0 ? void 0 : _a.forEach(key => {\n        const segment = `:has(${String(key)})`;\n        list.push(path ? [...path, segment] : [segment]);\n      });\n      if (used[ALL_OWN_KEYS_PROPERTY] === true) {\n        const segment = ':ownKeys';\n        list.push(path ? [...path, segment] : [segment]);\n      } else {\n        (_b = used[HAS_OWN_KEY_PROPERTY]) === null || _b === void 0 ? void 0 : _b.forEach(key => {\n          const segment = `:hasOwn(${String(key)})`;\n          list.push(path ? [...path, segment] : [segment]);\n        });\n      }\n      (_c = used[KEYS_PROPERTY]) === null || _c === void 0 ? void 0 : _c.forEach(key => {\n        if (!onlyWithValues || 'value' in (Object.getOwnPropertyDescriptor(x, key) || {})) {\n          walk(x[key], path ? [...path, key] : [key]);\n        }\n      });\n    } else if (path) {\n      list.push(path);\n    }\n  };\n  walk(obj);\n  return list;\n};\n/**\n * replace newProxy function.\n *\n * This can be used if you want to use proxy-polyfill.\n * Note that proxy-polyfill can't polyfill everything.\n * Use it at your own risk.\n */\nexport const replaceNewProxy = fn => {\n  newProxy = fn;\n};","map":{"version":3,"names":["TRACK_MEMO_SYMBOL","Symbol","GET_ORIGINAL_SYMBOL","AFFECTED_PROPERTY","IS_TARGET_COPIED_PROPERTY","PROXY_PROPERTY","PROXY_CACHE_PROPERTY","TARGET_CACHE_PROPERTY","NEXT_OBJECT_PROPERTY","CHANGED_PROPERTY","HAS_KEY_PROPERTY","ALL_OWN_KEYS_PROPERTY","HAS_OWN_KEY_PROPERTY","KEYS_PROPERTY","newProxy","target","handler","Proxy","getProto","Object","getPrototypeOf","objectsToTrack","WeakMap","isObjectToTrack","obj","has","get","prototype","Array","isObject","x","needsToCopyTargetObject","values","getOwnPropertyDescriptors","some","descriptor","configurable","writable","copyTargetObject","isArray","from","descriptors","forEach","desc","create","createProxyHandler","origObj","isTargetCopied","state","trackObject","recordUsage","type","key","used","set","Set","add","recordObjectAsUsed","delete","createProxy","Reflect","getOwnPropertyDescriptor","ownKeys","deleteProperty","getOriginalObject","affected","proxyCache","targetCache","targetAndCopied","copiedTarget","handlerAndState","isAllOwnKeysChanged","prevObj","nextObj","prevKeys","nextKeys","length","k","i","isChanged","cache","isEqual","is","hit","changed","hasPrev","hasNext","trackMemo","getUntracked","markToTrack","mark","affectedToPathList","onlyWithValues","list","seen","WeakSet","walk","path","_a","_b","_c","segment","String","push","replaceNewProxy","fn"],"sources":["D:/assignment/e_commerce/ecommerce-product-page/node_modules/proxy-compare/dist/index.js"],"sourcesContent":["/* eslint @typescript-eslint/no-explicit-any: off */\n// symbols\nconst TRACK_MEMO_SYMBOL = Symbol();\nconst GET_ORIGINAL_SYMBOL = Symbol();\n// properties\nconst AFFECTED_PROPERTY = 'a';\nconst IS_TARGET_COPIED_PROPERTY = 'f';\nconst PROXY_PROPERTY = 'p';\nconst PROXY_CACHE_PROPERTY = 'c';\nconst TARGET_CACHE_PROPERTY = 't';\nconst NEXT_OBJECT_PROPERTY = 'n';\nconst CHANGED_PROPERTY = 'g';\nconst HAS_KEY_PROPERTY = 'h';\nconst ALL_OWN_KEYS_PROPERTY = 'w';\nconst HAS_OWN_KEY_PROPERTY = 'o';\nconst KEYS_PROPERTY = 'k';\n// function to create a new bare proxy\nlet newProxy = (target, handler) => new Proxy(target, handler);\n// get object prototype\nconst getProto = Object.getPrototypeOf;\nconst objectsToTrack = new WeakMap();\n// check if obj is a plain object or an array\nconst isObjectToTrack = (obj) => obj &&\n    (objectsToTrack.has(obj)\n        ? objectsToTrack.get(obj)\n        : getProto(obj) === Object.prototype || getProto(obj) === Array.prototype);\n// check if it is object\nconst isObject = (x) => typeof x === 'object' && x !== null;\n// Properties that are both non-configurable and non-writable will break\n// the proxy get trap when we try to return a recursive/child compare proxy\n// from them. We can avoid this by making a copy of the target object with\n// all descriptors marked as configurable, see `copyTargetObject`.\n// See: https://github.com/dai-shi/proxy-compare/pull/8\nconst needsToCopyTargetObject = (obj) => Object.values(Object.getOwnPropertyDescriptors(obj)).some((descriptor) => !descriptor.configurable && !descriptor.writable);\n// Make a copy with all descriptors marked as configurable.\nconst copyTargetObject = (obj) => {\n    if (Array.isArray(obj)) {\n        // Arrays need a special way to copy\n        return Array.from(obj);\n    }\n    // For non-array objects, we create a new object keeping the prototype\n    // with changing all configurable options (otherwise, proxies will complain)\n    const descriptors = Object.getOwnPropertyDescriptors(obj);\n    Object.values(descriptors).forEach((desc) => {\n        desc.configurable = true;\n    });\n    return Object.create(getProto(obj), descriptors);\n};\nconst createProxyHandler = (origObj, isTargetCopied) => {\n    const state = {\n        [IS_TARGET_COPIED_PROPERTY]: isTargetCopied,\n    };\n    let trackObject = false; // for trackMemo\n    const recordUsage = (type, key) => {\n        if (!trackObject) {\n            let used = state[AFFECTED_PROPERTY].get(origObj);\n            if (!used) {\n                used = {};\n                state[AFFECTED_PROPERTY].set(origObj, used);\n            }\n            if (type === ALL_OWN_KEYS_PROPERTY) {\n                used[ALL_OWN_KEYS_PROPERTY] = true;\n            }\n            else {\n                let set = used[type];\n                if (!set) {\n                    set = new Set();\n                    used[type] = set;\n                }\n                set.add(key);\n            }\n        }\n    };\n    const recordObjectAsUsed = () => {\n        trackObject = true;\n        state[AFFECTED_PROPERTY].delete(origObj);\n    };\n    const handler = {\n        get(target, key) {\n            if (key === GET_ORIGINAL_SYMBOL) {\n                return origObj;\n            }\n            recordUsage(KEYS_PROPERTY, key);\n            return createProxy(Reflect.get(target, key), state[AFFECTED_PROPERTY], state[PROXY_CACHE_PROPERTY], state[TARGET_CACHE_PROPERTY]);\n        },\n        has(target, key) {\n            if (key === TRACK_MEMO_SYMBOL) {\n                recordObjectAsUsed();\n                return true;\n            }\n            recordUsage(HAS_KEY_PROPERTY, key);\n            return Reflect.has(target, key);\n        },\n        getOwnPropertyDescriptor(target, key) {\n            recordUsage(HAS_OWN_KEY_PROPERTY, key);\n            return Reflect.getOwnPropertyDescriptor(target, key);\n        },\n        ownKeys(target) {\n            recordUsage(ALL_OWN_KEYS_PROPERTY);\n            return Reflect.ownKeys(target);\n        },\n    };\n    if (isTargetCopied) {\n        handler.set = handler.deleteProperty = () => false;\n    }\n    return [handler, state];\n};\nconst getOriginalObject = (obj) => \n// unwrap proxy\nobj[GET_ORIGINAL_SYMBOL] ||\n    // otherwise\n    obj;\n/**\n * Create a proxy.\n *\n * This function will create a proxy at top level and proxy nested objects as you access them,\n * in order to keep track of which properties were accessed via get/has proxy handlers:\n *\n * NOTE: Printing of WeakMap is hard to inspect and not very readable\n * for this purpose you can use the `affectedToPathList` helper.\n *\n * @param {object} obj - Object that will be wrapped on the proxy.\n * @param {WeakMap<object, unknown>} affected -\n * WeakMap that will hold the tracking of which properties in the proxied object were accessed.\n * @param {WeakMap<object, unknown>} [proxyCache] -\n * WeakMap that will help keep referential identity for proxies.\n * @returns {Proxy<object>} - Object wrapped in a proxy.\n *\n * @example\n * import { createProxy } from 'proxy-compare';\n *\n * const original = { a: \"1\", c: \"2\", d: { e: \"3\" } };\n * const affected = new WeakMap();\n * const proxy = createProxy(original, affected);\n *\n * proxy.a // Will mark as used and track its value.\n * // This will update the affected WeakMap with original as key\n * // and a Set with \"a\"\n *\n * proxy.d // Will mark \"d\" as accessed to track and proxy itself ({ e: \"3\" }).\n * // This will update the affected WeakMap with original as key\n * // and a Set with \"d\"\n */\nexport const createProxy = (obj, affected, proxyCache, targetCache) => {\n    if (!isObjectToTrack(obj))\n        return obj;\n    let targetAndCopied = targetCache && targetCache.get(obj);\n    if (!targetAndCopied) {\n        const target = getOriginalObject(obj);\n        if (needsToCopyTargetObject(target)) {\n            targetAndCopied = [target, copyTargetObject(target)];\n        }\n        else {\n            targetAndCopied = [target];\n        }\n        targetCache === null || targetCache === void 0 ? void 0 : targetCache.set(obj, targetAndCopied);\n    }\n    const [target, copiedTarget] = targetAndCopied;\n    let handlerAndState = proxyCache && proxyCache.get(target);\n    if (!handlerAndState ||\n        handlerAndState[1][IS_TARGET_COPIED_PROPERTY] !== !!copiedTarget) {\n        handlerAndState = createProxyHandler(target, !!copiedTarget);\n        handlerAndState[1][PROXY_PROPERTY] = newProxy(copiedTarget || target, handlerAndState[0]);\n        if (proxyCache) {\n            proxyCache.set(target, handlerAndState);\n        }\n    }\n    handlerAndState[1][AFFECTED_PROPERTY] = affected;\n    handlerAndState[1][PROXY_CACHE_PROPERTY] = proxyCache;\n    handlerAndState[1][TARGET_CACHE_PROPERTY] = targetCache;\n    return handlerAndState[1][PROXY_PROPERTY];\n};\nconst isAllOwnKeysChanged = (prevObj, nextObj) => {\n    const prevKeys = Reflect.ownKeys(prevObj);\n    const nextKeys = Reflect.ownKeys(nextObj);\n    return (prevKeys.length !== nextKeys.length ||\n        prevKeys.some((k, i) => k !== nextKeys[i]));\n};\n/**\n * Compare changes on objects.\n *\n * This will compare the affected properties on tracked objects inside the proxy\n * to check if there were any changes made to it,\n * by default if no property was accessed on the proxy it will attempt to do a\n * reference equality check for the objects provided (Object.is(a, b)). If you access a property\n * on the proxy, then isChanged will only compare the affected properties.\n *\n * @param {object} prevObj - The previous object to compare.\n * @param {object} nextObj - Object to compare with the previous one.\n * @param {WeakMap<object, unknown>} affected -\n * WeakMap that holds the tracking of which properties in the proxied object were accessed.\n * @param {WeakMap<object, unknown>} [cache] -\n * WeakMap that holds a cache of the comparisons for better performance with repetitive comparisons,\n * and to avoid infinite loop with circular structures.\n * @returns {boolean} - Boolean indicating if the affected property on the object has changed.\n *\n * @example\n * import { createProxy, isChanged } from 'proxy-compare';\n *\n * const obj = { a: \"1\", c: \"2\", d: { e: \"3\" } };\n * const affected = new WeakMap();\n *\n * const proxy = createProxy(obj, affected);\n *\n * proxy.a\n *\n * isChanged(obj, { a: \"1\" }, affected) // false\n *\n * proxy.a = \"2\"\n *\n * isChanged(obj, { a: \"1\" }, affected) // true\n */\nexport const isChanged = (prevObj, nextObj, affected, cache, isEqual = Object.is) => {\n    if (isEqual(prevObj, nextObj)) {\n        return false;\n    }\n    if (!isObject(prevObj) || !isObject(nextObj))\n        return true;\n    const used = affected.get(getOriginalObject(prevObj));\n    if (!used)\n        return true;\n    if (cache) {\n        const hit = cache.get(prevObj);\n        if (hit && hit[NEXT_OBJECT_PROPERTY] === nextObj) {\n            return hit[CHANGED_PROPERTY];\n        }\n        // for object with cycles\n        cache.set(prevObj, {\n            [NEXT_OBJECT_PROPERTY]: nextObj,\n            [CHANGED_PROPERTY]: false,\n        });\n    }\n    let changed = null;\n    try {\n        for (const key of used[HAS_KEY_PROPERTY] || []) {\n            changed = Reflect.has(prevObj, key) !== Reflect.has(nextObj, key);\n            if (changed)\n                return changed;\n        }\n        if (used[ALL_OWN_KEYS_PROPERTY] === true) {\n            changed = isAllOwnKeysChanged(prevObj, nextObj);\n            if (changed)\n                return changed;\n        }\n        else {\n            for (const key of used[HAS_OWN_KEY_PROPERTY] || []) {\n                const hasPrev = !!Reflect.getOwnPropertyDescriptor(prevObj, key);\n                const hasNext = !!Reflect.getOwnPropertyDescriptor(nextObj, key);\n                changed = hasPrev !== hasNext;\n                if (changed)\n                    return changed;\n            }\n        }\n        for (const key of used[KEYS_PROPERTY] || []) {\n            changed = isChanged(prevObj[key], nextObj[key], affected, cache, isEqual);\n            if (changed)\n                return changed;\n        }\n        if (changed === null)\n            changed = true;\n        return changed;\n    }\n    finally {\n        if (cache) {\n            cache.set(prevObj, {\n                [NEXT_OBJECT_PROPERTY]: nextObj,\n                [CHANGED_PROPERTY]: changed,\n            });\n        }\n    }\n};\n// explicitly track object with memo\nexport const trackMemo = (obj) => {\n    if (isObjectToTrack(obj)) {\n        return TRACK_MEMO_SYMBOL in obj;\n    }\n    return false;\n};\n/**\n * Unwrap proxy to get the original object.\n *\n * Used to retrieve the original object used to create the proxy instance with `createProxy`.\n *\n * @param {Proxy<object>} obj -  The proxy wrapper of the originial object.\n * @returns {object | null} - Return either the unwrapped object if exists.\n *\n * @example\n * import { createProxy, getUntracked } from 'proxy-compare';\n *\n * const original = { a: \"1\", c: \"2\", d: { e: \"3\" } };\n * const affected = new WeakMap();\n *\n * const proxy = createProxy(original, affected);\n * const originalFromProxy = getUntracked(proxy)\n *\n * Object.is(original, originalFromProxy) // true\n * isChanged(original, originalFromProxy, affected) // false\n */\nexport const getUntracked = (obj) => {\n    if (isObjectToTrack(obj)) {\n        return obj[GET_ORIGINAL_SYMBOL] || null;\n    }\n    return null;\n};\n/**\n * Mark object to be tracked.\n *\n * This function marks an object that will be passed into `createProxy`\n * as marked to track or not. By default only Array and Object are marked to track,\n * so this is useful for example to mark a class instance to track or to mark a object\n * to be untracked when creating your proxy.\n *\n * @param obj - Object to mark as tracked or not.\n * @param mark - Boolean indicating whether you want to track this object or not.\n * @returns - No return.\n *\n * @example\n * import { createProxy, markToTrack, isChanged } from 'proxy-compare';\n *\n * const nested = { e: \"3\" }\n *\n * markToTrack(nested, false)\n *\n * const original = { a: \"1\", c: \"2\", d: nested };\n * const affected = new WeakMap();\n *\n * const proxy = createProxy(original, affected);\n *\n * proxy.d.e\n *\n * isChanged(original, { d: { e: \"3\" } }, affected) // true\n */\nexport const markToTrack = (obj, mark = true) => {\n    objectsToTrack.set(obj, mark);\n};\n/**\n * Convert `affected` to path list\n *\n * `affected` is a weak map which is not printable.\n * This function is can convert it to printable path list.\n * It's for debugging purpose.\n *\n * @param obj - An object that is used with `createProxy`.\n * @param affected - A weak map that is used with `createProxy`.\n * @param onlyWithValues - An optional boolean to exclude object getters.\n * @returns - An array of paths.\n */\nexport const affectedToPathList = (obj, affected, onlyWithValues) => {\n    const list = [];\n    const seen = new WeakSet();\n    const walk = (x, path) => {\n        var _a, _b, _c;\n        if (seen.has(x)) {\n            // for object with cycles\n            return;\n        }\n        if (isObject(x)) {\n            seen.add(x);\n        }\n        const used = isObject(x) && affected.get(getOriginalObject(x));\n        if (used) {\n            (_a = used[HAS_KEY_PROPERTY]) === null || _a === void 0 ? void 0 : _a.forEach((key) => {\n                const segment = `:has(${String(key)})`;\n                list.push(path ? [...path, segment] : [segment]);\n            });\n            if (used[ALL_OWN_KEYS_PROPERTY] === true) {\n                const segment = ':ownKeys';\n                list.push(path ? [...path, segment] : [segment]);\n            }\n            else {\n                (_b = used[HAS_OWN_KEY_PROPERTY]) === null || _b === void 0 ? void 0 : _b.forEach((key) => {\n                    const segment = `:hasOwn(${String(key)})`;\n                    list.push(path ? [...path, segment] : [segment]);\n                });\n            }\n            (_c = used[KEYS_PROPERTY]) === null || _c === void 0 ? void 0 : _c.forEach((key) => {\n                if (!onlyWithValues ||\n                    'value' in (Object.getOwnPropertyDescriptor(x, key) || {})) {\n                    walk(x[key], path ? [...path, key] : [key]);\n                }\n            });\n        }\n        else if (path) {\n            list.push(path);\n        }\n    };\n    walk(obj);\n    return list;\n};\n/**\n * replace newProxy function.\n *\n * This can be used if you want to use proxy-polyfill.\n * Note that proxy-polyfill can't polyfill everything.\n * Use it at your own risk.\n */\nexport const replaceNewProxy = (fn) => {\n    newProxy = fn;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}