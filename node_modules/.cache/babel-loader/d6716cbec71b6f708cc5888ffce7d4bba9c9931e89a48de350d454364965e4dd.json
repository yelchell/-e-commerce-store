{"ast":null,"code":"'use client';\n\nimport * as presence from '@zag-js/presence';\nimport { useMachine, normalizeProps } from '@zag-js/react';\nimport { useRef } from 'react';\nimport { useEvent } from '../../utils/use-event.js';\nconst usePresence = props => {\n  const {\n    lazyMount,\n    unmountOnExit,\n    ...rest\n  } = props;\n  const wasEverPresent = useRef(false);\n  const context = {\n    ...rest,\n    onExitComplete: useEvent(props.onExitComplete)\n  };\n  const [state, send] = useMachine(presence.machine(context), {\n    context\n  });\n  const api = presence.connect(state, send, normalizeProps);\n  if (api.present) {\n    wasEverPresent.current = true;\n  }\n  const unmounted = !api.present && !wasEverPresent.current && lazyMount || unmountOnExit && !api.present && wasEverPresent.current;\n  const getPresenceProps = () => ({\n    \"data-state\": props.present ? \"open\" : \"closed\",\n    hidden: !api.present\n  });\n  return {\n    ref: api.setNode,\n    getPresenceProps,\n    present: api.present,\n    unmounted\n  };\n};\nexport { usePresence };","map":{"version":3,"names":["presence","useMachine","normalizeProps","useRef","useEvent","usePresence","props","lazyMount","unmountOnExit","rest","wasEverPresent","context","onExitComplete","state","send","machine","api","connect","present","current","unmounted","getPresenceProps","hidden","ref","setNode"],"sources":["D:/assignment/e_commerce/ecommerce-product-page/node_modules/@ark-ui/react/dist/components/presence/use-presence.js"],"sourcesContent":["'use client';\nimport * as presence from '@zag-js/presence';\nimport { useMachine, normalizeProps } from '@zag-js/react';\nimport { useRef } from 'react';\nimport { useEvent } from '../../utils/use-event.js';\n\nconst usePresence = (props) => {\n  const { lazyMount, unmountOnExit, ...rest } = props;\n  const wasEverPresent = useRef(false);\n  const context = {\n    ...rest,\n    onExitComplete: useEvent(props.onExitComplete)\n  };\n  const [state, send] = useMachine(presence.machine(context), { context });\n  const api = presence.connect(state, send, normalizeProps);\n  if (api.present) {\n    wasEverPresent.current = true;\n  }\n  const unmounted = !api.present && !wasEverPresent.current && lazyMount || unmountOnExit && !api.present && wasEverPresent.current;\n  const getPresenceProps = () => ({\n    \"data-state\": props.present ? \"open\" : \"closed\",\n    hidden: !api.present\n  });\n  return {\n    ref: api.setNode,\n    getPresenceProps,\n    present: api.present,\n    unmounted\n  };\n};\n\nexport { usePresence };\n"],"mappings":"AAAA,YAAY;;AACZ,OAAO,KAAKA,QAAQ,MAAM,kBAAkB;AAC5C,SAASC,UAAU,EAAEC,cAAc,QAAQ,eAAe;AAC1D,SAASC,MAAM,QAAQ,OAAO;AAC9B,SAASC,QAAQ,QAAQ,0BAA0B;AAEnD,MAAMC,WAAW,GAAIC,KAAK,IAAK;EAC7B,MAAM;IAAEC,SAAS;IAAEC,aAAa;IAAE,GAAGC;EAAK,CAAC,GAAGH,KAAK;EACnD,MAAMI,cAAc,GAAGP,MAAM,CAAC,KAAK,CAAC;EACpC,MAAMQ,OAAO,GAAG;IACd,GAAGF,IAAI;IACPG,cAAc,EAAER,QAAQ,CAACE,KAAK,CAACM,cAAc;EAC/C,CAAC;EACD,MAAM,CAACC,KAAK,EAAEC,IAAI,CAAC,GAAGb,UAAU,CAACD,QAAQ,CAACe,OAAO,CAACJ,OAAO,CAAC,EAAE;IAAEA;EAAQ,CAAC,CAAC;EACxE,MAAMK,GAAG,GAAGhB,QAAQ,CAACiB,OAAO,CAACJ,KAAK,EAAEC,IAAI,EAAEZ,cAAc,CAAC;EACzD,IAAIc,GAAG,CAACE,OAAO,EAAE;IACfR,cAAc,CAACS,OAAO,GAAG,IAAI;EAC/B;EACA,MAAMC,SAAS,GAAG,CAACJ,GAAG,CAACE,OAAO,IAAI,CAACR,cAAc,CAACS,OAAO,IAAIZ,SAAS,IAAIC,aAAa,IAAI,CAACQ,GAAG,CAACE,OAAO,IAAIR,cAAc,CAACS,OAAO;EACjI,MAAME,gBAAgB,GAAGA,CAAA,MAAO;IAC9B,YAAY,EAAEf,KAAK,CAACY,OAAO,GAAG,MAAM,GAAG,QAAQ;IAC/CI,MAAM,EAAE,CAACN,GAAG,CAACE;EACf,CAAC,CAAC;EACF,OAAO;IACLK,GAAG,EAAEP,GAAG,CAACQ,OAAO;IAChBH,gBAAgB;IAChBH,OAAO,EAAEF,GAAG,CAACE,OAAO;IACpBE;EACF,CAAC;AACH,CAAC;AAED,SAASf,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}