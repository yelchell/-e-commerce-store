{"ast":null,"code":"// // src/components/ProductPickerDialog.js\n// import React, { useState, useEffect } from 'react';\n// import Modal from 'react-bootstrap/Modal';\n// import Table from 'react-bootstrap/Table';\n// import Form from 'react-bootstrap/Form';\n// import Button from 'react-bootstrap/Button';\n// import Image from 'react-bootstrap/Image';\n// import axios from 'axios';\n// const ProductPickerDialog = ({ show, onClose, onProductSelect }) => {\n//     const [searchTerm, setSearchTerm] = useState('');\n//     const [products, setProducts] = useState([]);\n//     const [selectedProducts, setSelectedProducts] = useState([]);\n//     const [selectedVariants, setSelectedVariants] = useState([]);\n//     console.log()\n//     useEffect(() => {\n//         if (searchTerm) {\n//             fetchProducts(searchTerm);\n//         }\n//     }, [searchTerm]);\n//     useEffect(() => {\n//         if (show) {\n//             setSearchTerm('');\n//             setProducts([]);\n//         }\n//     }, [show]);\n//     const fetchProducts = async (search) => {\n//         try {\n//             const response = await axios.get(\n//                 `/task/products/search`,\n//                 {\n//                     params: { search, page: 1, limit: 10 },\n//                     headers: {\n//                         'x-api-key': '72njgfa948d9aS7gs5'  // Replace with your actual API key\n//                     }\n//                 });\n//             if (response) {\n//                 setProducts(response.data);\n//             } else {\n//                 setProducts([])\n//             }\n//         } catch (error) {\n//             console.error('Error fetching products:', error);\n//         }\n//     };\n//     const handleSelectProduct = (product) => {\n//         const isSelected = selectedProducts.includes(product);\n//         if (isSelected) {\n//             setSelectedProducts(selectedProducts.filter(p => p.id !== product.id));\n//         } else {\n//             setSelectedProducts([...selectedProducts, product]);\n//         }\n//     };\n//     const handleAddProducts = () => {\n//         onProductSelect(selectedProducts);\n//         onClose();\n//     };\n//     const handleSelectVariant = (variant) => {\n//         const isSelected = selectedVariants.some(v => v.id === variant.id);\n//         if (isSelected) {\n//             setSelectedVariants(selectedVariants.filter(v => v.id !== variant.id));\n//         } else {\n//             setSelectedVariants([...selectedVariants, variant]);\n//         }\n//     };\n//     return (\n//         <Modal show={show} onHide={onClose} size=\"lg\" centered>\n//             <Modal.Header closeButton>\n//                 <Modal.Title>Select Products</Modal.Title>\n//             </Modal.Header>\n//             <Modal.Body>\n//                 <Form.Control\n//                     type=\"text\"\n//                     placeholder=\"Search product\"\n//                     value={searchTerm}\n//                     onChange={(e) => setSearchTerm(e.target.value)}\n//                     className=\"mb-3\"\n//                 />\n//                 <Table bordered>\n//                     <thead>\n//                         <tr>\n//                             <th></th>\n//                             <th>Product</th>\n//                             <th>Variants</th>\n//                             <th>Price</th>\n//                         </tr>\n//                     </thead>\n//                     <tbody>\n//                         {products ? products.map((product) => (\n//                             <React.Fragment key={product.id}>\n//                                 <tr>\n//                                     <td>\n//                                         <Form.Check\n//                                             type=\"checkbox\"\n//                                             checked={selectedProducts.includes(product)}\n//                                             onChange={() => handleSelectProduct(product)}\n//                                         />\n//                                     </td>\n//                                     <td>\n//                                         <Image src={product.image.src} thumbnail width={50} />{' '}\n//                                         {product.title}\n//                                     </td>\n//                                     <td colSpan=\"2\">\n//                                         {product.variants.map((variant) => (\n//                                             <div key={variant.id}>\n//                                                 <tr key={variant.id}>\n//                                                     <td></td>\n//                                                     <td></td>\n//                                                     <td>\n//                                                         <Form.Check\n//                                                             type=\"checkbox\"\n//                                                             checked={selectedVariants.some(v => v.id === variant.id)}\n//                                                             onChange={() => handleSelectVariant(variant)}\n//                                                         />\n//                                                         {variant.title}\n//                                                     </td>\n//                                                     <td>${variant.price}</td>\n//                                                 </tr>\n//                                             </div>\n//                                         ))}\n//                                     </td>\n//                                 </tr>\n//                             </React.Fragment>\n//                         )) : <>No products found..</>}\n//                     </tbody>\n//                 </Table>\n//             </Modal.Body>\n//             <Modal.Footer>\n//                 <Button variant=\"secondary\" onClick={onClose}>\n//                     Cancel\n//                 </Button>\n//                 <Button variant=\"primary\" onClick={handleAddProducts}>\n//                     Add\n//                 </Button>\n//             </Modal.Footer>\n//         </Modal>\n//     );\n// };\n// export default ProductPickerDialog;\n// src/components/ProductPickerDialog.js\nimport React,{useState,useEffect}from'react';import Modal from'react-bootstrap/Modal';import Table from'react-bootstrap/Table';import Form from'react-bootstrap/Form';import Button from'react-bootstrap/Button';import Image from'react-bootstrap/Image';import axios from'axios';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const ProductPickerDialog=_ref=>{let{show,onClose,onProductSelect}=_ref;const[searchTerm,setSearchTerm]=useState('');const[products,setProducts]=useState([]);const[selectedProducts,setSelectedProducts]=useState([]);const[selectedVariants,setSelectedVariants]=useState([]);useEffect(()=>{if(searchTerm){fetchProducts(searchTerm);}},[searchTerm]);useEffect(()=>{if(show){setSearchTerm('');setProducts([]);setSelectedProducts([]);// Clear previously selected products\nsetSelectedVariants([]);// Clear previously selected variants\n}},[show]);const fetchProducts=async search=>{try{const response=await axios.get(`/task/products/search`,{params:{search,page:1,limit:10},headers:{'x-api-key':'72njgfa948d9aS7gs5'// Replace with your actual API key\n}});setProducts(response.data||[]);}catch(error){console.error('Error fetching products:',error);}};const handleSelectProduct=product=>{const isSelected=selectedProducts.includes(product);if(isSelected){// Deselect product and its variants\nsetSelectedProducts(selectedProducts.filter(p=>p.id!==product.id));setSelectedVariants(selectedVariants.filter(v=>v.product_id!==product.id));}else{// Select product and all its variants\nsetSelectedProducts([...selectedProducts,product]);setSelectedVariants([...selectedVariants,...product.variants.map(variant=>({...variant,product_id:product.id}))]);}};const handleSelectVariant=(variant,product)=>{const isSelected=selectedVariants.some(v=>v.id===variant.id);if(isSelected){// Deselect the variant\nsetSelectedVariants(selectedVariants.filter(v=>v.id!==variant.id));// If no more variants of this product are selected, deselect the product as well\nconst remainingVariants=selectedVariants.filter(v=>v.product_id===product.id&&v.id!==variant.id);if(remainingVariants.length===0){setSelectedProducts(selectedProducts.filter(p=>p.id!==product.id));}}else{// Select the variant\nsetSelectedVariants([...selectedVariants,variant]);// If the product is not selected, select it as well\nif(!selectedProducts.includes(product)){setSelectedProducts([...selectedProducts,product]);}}};const handleAddProducts=()=>{onProductSelect(selectedProducts,selectedVariants);onClose();};return/*#__PURE__*/_jsxs(Modal,{show:show,onHide:onClose,size:\"lg\",centered:true,children:[/*#__PURE__*/_jsx(Modal.Header,{closeButton:true,children:/*#__PURE__*/_jsx(Modal.Title,{children:\"Select Products\"})}),/*#__PURE__*/_jsxs(Modal.Body,{children:[/*#__PURE__*/_jsx(Form.Control,{type:\"text\",placeholder:\"Search product\",value:searchTerm,onChange:e=>setSearchTerm(e.target.value),className:\"mb-3\"}),/*#__PURE__*/_jsxs(Table,{bordered:true,children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{}),/*#__PURE__*/_jsx(\"th\",{children:\"Product\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Variants\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Price\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:products.length>0?products.map(product=>/*#__PURE__*/_jsxs(React.Fragment,{children:[/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:/*#__PURE__*/_jsx(Form.Check,{type:\"checkbox\",checked:selectedProducts.includes(product),onChange:()=>handleSelectProduct(product)})}),/*#__PURE__*/_jsxs(\"td\",{children:[/*#__PURE__*/_jsx(Image,{src:product.image.src,thumbnail:true,width:50}),' ',product.title]}),/*#__PURE__*/_jsx(\"td\",{colSpan:\"2\"})]}),product.variants.map(variant=>/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{}),/*#__PURE__*/_jsx(\"td\",{}),/*#__PURE__*/_jsxs(\"td\",{children:[/*#__PURE__*/_jsx(Form.Check,{type:\"checkbox\",checked:selectedVariants.some(v=>v.id===variant.id),onChange:()=>handleSelectVariant(variant,product)}),variant.title]}),/*#__PURE__*/_jsxs(\"td\",{children:[\"$\",variant.price]})]},variant.id))]},product.id)):/*#__PURE__*/_jsx(\"tr\",{children:/*#__PURE__*/_jsx(\"td\",{colSpan:\"4\",className:\"text-center\",children:\"No products found.\"})})})]})]}),/*#__PURE__*/_jsxs(Modal.Footer,{children:[/*#__PURE__*/_jsx(Button,{variant:\"secondary\",onClick:onClose,children:\"Cancel\"}),/*#__PURE__*/_jsx(Button,{variant:\"primary\",onClick:handleAddProducts,children:\"Add\"})]})]});};export default ProductPickerDialog;","map":{"version":3,"names":["React","useState","useEffect","Modal","Table","Form","Button","Image","axios","jsx","_jsx","jsxs","_jsxs","ProductPickerDialog","_ref","show","onClose","onProductSelect","searchTerm","setSearchTerm","products","setProducts","selectedProducts","setSelectedProducts","selectedVariants","setSelectedVariants","fetchProducts","search","response","get","params","page","limit","headers","data","error","console","handleSelectProduct","product","isSelected","includes","filter","p","id","v","product_id","variants","map","variant","handleSelectVariant","some","remainingVariants","length","handleAddProducts","onHide","size","centered","children","Header","closeButton","Title","Body","Control","type","placeholder","value","onChange","e","target","className","bordered","Fragment","Check","checked","src","image","thumbnail","width","title","colSpan","price","Footer","onClick"],"sources":["D:/assignment/e_commerce/ecommerce-product-page/src/components/productpicker.js"],"sourcesContent":["// // src/components/ProductPickerDialog.js\r\n// import React, { useState, useEffect } from 'react';\r\n// import Modal from 'react-bootstrap/Modal';\r\n// import Table from 'react-bootstrap/Table';\r\n// import Form from 'react-bootstrap/Form';\r\n// import Button from 'react-bootstrap/Button';\r\n// import Image from 'react-bootstrap/Image';\r\n// import axios from 'axios';\r\n\r\n// const ProductPickerDialog = ({ show, onClose, onProductSelect }) => {\r\n//     const [searchTerm, setSearchTerm] = useState('');\r\n//     const [products, setProducts] = useState([]);\r\n//     const [selectedProducts, setSelectedProducts] = useState([]);\r\n//     const [selectedVariants, setSelectedVariants] = useState([]);\r\n//     console.log()\r\n//     useEffect(() => {\r\n//         if (searchTerm) {\r\n//             fetchProducts(searchTerm);\r\n//         }\r\n//     }, [searchTerm]);\r\n\r\n//     useEffect(() => {\r\n//         if (show) {\r\n//             setSearchTerm('');\r\n//             setProducts([]);\r\n//         }\r\n//     }, [show]);\r\n\r\n//     const fetchProducts = async (search) => {\r\n//         try {\r\n//             const response = await axios.get(\r\n//                 `/task/products/search`,\r\n//                 {\r\n//                     params: { search, page: 1, limit: 10 },\r\n//                     headers: {\r\n//                         'x-api-key': '72njgfa948d9aS7gs5'  // Replace with your actual API key\r\n//                     }\r\n//                 });\r\n//             if (response) {\r\n//                 setProducts(response.data);\r\n\r\n//             } else {\r\n//                 setProducts([])\r\n//             }\r\n//         } catch (error) {\r\n//             console.error('Error fetching products:', error);\r\n//         }\r\n//     };\r\n\r\n//     const handleSelectProduct = (product) => {\r\n//         const isSelected = selectedProducts.includes(product);\r\n//         if (isSelected) {\r\n//             setSelectedProducts(selectedProducts.filter(p => p.id !== product.id));\r\n//         } else {\r\n//             setSelectedProducts([...selectedProducts, product]);\r\n//         }\r\n//     };\r\n\r\n//     const handleAddProducts = () => {\r\n//         onProductSelect(selectedProducts);\r\n//         onClose();\r\n//     };\r\n\r\n//     const handleSelectVariant = (variant) => {\r\n//         const isSelected = selectedVariants.some(v => v.id === variant.id);\r\n//         if (isSelected) {\r\n//             setSelectedVariants(selectedVariants.filter(v => v.id !== variant.id));\r\n//         } else {\r\n//             setSelectedVariants([...selectedVariants, variant]);\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <Modal show={show} onHide={onClose} size=\"lg\" centered>\r\n//             <Modal.Header closeButton>\r\n//                 <Modal.Title>Select Products</Modal.Title>\r\n//             </Modal.Header>\r\n//             <Modal.Body>\r\n//                 <Form.Control\r\n//                     type=\"text\"\r\n//                     placeholder=\"Search product\"\r\n//                     value={searchTerm}\r\n//                     onChange={(e) => setSearchTerm(e.target.value)}\r\n//                     className=\"mb-3\"\r\n//                 />\r\n//                 <Table bordered>\r\n//                     <thead>\r\n//                         <tr>\r\n//                             <th></th>\r\n//                             <th>Product</th>\r\n//                             <th>Variants</th>\r\n//                             <th>Price</th>\r\n//                         </tr>\r\n//                     </thead>\r\n//                     <tbody>\r\n//                         {products ? products.map((product) => (\r\n//                             <React.Fragment key={product.id}>\r\n//                                 <tr>\r\n//                                     <td>\r\n//                                         <Form.Check\r\n//                                             type=\"checkbox\"\r\n//                                             checked={selectedProducts.includes(product)}\r\n//                                             onChange={() => handleSelectProduct(product)}\r\n//                                         />\r\n//                                     </td>\r\n//                                     <td>\r\n//                                         <Image src={product.image.src} thumbnail width={50} />{' '}\r\n//                                         {product.title}\r\n//                                     </td>\r\n//                                     <td colSpan=\"2\">\r\n//                                         {product.variants.map((variant) => (\r\n//                                             <div key={variant.id}>\r\n//                                                 <tr key={variant.id}>\r\n//                                                     <td></td>\r\n//                                                     <td></td>\r\n//                                                     <td>\r\n//                                                         <Form.Check\r\n//                                                             type=\"checkbox\"\r\n//                                                             checked={selectedVariants.some(v => v.id === variant.id)}\r\n//                                                             onChange={() => handleSelectVariant(variant)}\r\n//                                                         />\r\n//                                                         {variant.title}\r\n//                                                     </td>\r\n//                                                     <td>${variant.price}</td>\r\n//                                                 </tr>\r\n//                                             </div>\r\n//                                         ))}\r\n//                                     </td>\r\n//                                 </tr>\r\n//                             </React.Fragment>\r\n//                         )) : <>No products found..</>}\r\n//                     </tbody>\r\n//                 </Table>\r\n//             </Modal.Body>\r\n//             <Modal.Footer>\r\n//                 <Button variant=\"secondary\" onClick={onClose}>\r\n//                     Cancel\r\n//                 </Button>\r\n//                 <Button variant=\"primary\" onClick={handleAddProducts}>\r\n//                     Add\r\n//                 </Button>\r\n//             </Modal.Footer>\r\n//         </Modal>\r\n//     );\r\n// };\r\n\r\n// export default ProductPickerDialog;\r\n\r\n\r\n\r\n// src/components/ProductPickerDialog.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Table from 'react-bootstrap/Table';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Image from 'react-bootstrap/Image';\r\nimport axios from 'axios';\r\n\r\nconst ProductPickerDialog = ({ show, onClose, onProductSelect }) => {\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [products, setProducts] = useState([]);\r\n    const [selectedProducts, setSelectedProducts] = useState([]);\r\n    const [selectedVariants, setSelectedVariants] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if (searchTerm) {\r\n            fetchProducts(searchTerm);\r\n        }\r\n    }, [searchTerm]);\r\n\r\n    useEffect(() => {\r\n        if (show) {\r\n            setSearchTerm('');\r\n            setProducts([]);\r\n            setSelectedProducts([]); // Clear previously selected products\r\n            setSelectedVariants([]); // Clear previously selected variants\r\n        }\r\n    }, [show]);\r\n\r\n    const fetchProducts = async (search) => {\r\n        try {\r\n            const response = await axios.get(\r\n                `/task/products/search`,\r\n                {\r\n                    params: { search, page: 1, limit: 10 },\r\n                    headers: {\r\n                        'x-api-key': '72njgfa948d9aS7gs5'  // Replace with your actual API key\r\n                    }\r\n                });\r\n            setProducts(response.data || []);\r\n        } catch (error) {\r\n            console.error('Error fetching products:', error);\r\n        }\r\n    };\r\n\r\n    const handleSelectProduct = (product) => {\r\n        const isSelected = selectedProducts.includes(product);\r\n\r\n        if (isSelected) {\r\n            // Deselect product and its variants\r\n            setSelectedProducts(selectedProducts.filter(p => p.id !== product.id));\r\n            setSelectedVariants(selectedVariants.filter(v => v.product_id !== product.id));\r\n        } else {\r\n            // Select product and all its variants\r\n            setSelectedProducts([...selectedProducts, product]);\r\n            setSelectedVariants([\r\n                ...selectedVariants,\r\n                ...product.variants.map(variant => ({ ...variant, product_id: product.id }))\r\n            ]);\r\n        }\r\n    };\r\n\r\n    const handleSelectVariant = (variant, product) => {\r\n        const isSelected = selectedVariants.some(v => v.id === variant.id);\r\n\r\n        if (isSelected) {\r\n            // Deselect the variant\r\n            setSelectedVariants(selectedVariants.filter(v => v.id !== variant.id));\r\n\r\n            // If no more variants of this product are selected, deselect the product as well\r\n            const remainingVariants = selectedVariants.filter(v => v.product_id === product.id && v.id !== variant.id);\r\n            if (remainingVariants.length === 0) {\r\n                setSelectedProducts(selectedProducts.filter(p => p.id !== product.id));\r\n            }\r\n        } else {\r\n            // Select the variant\r\n            setSelectedVariants([...selectedVariants, variant]);\r\n\r\n            // If the product is not selected, select it as well\r\n            if (!selectedProducts.includes(product)) {\r\n                setSelectedProducts([...selectedProducts, product]);\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleAddProducts = () => {\r\n        onProductSelect(selectedProducts, selectedVariants);\r\n        onClose();\r\n    };\r\n\r\n    return (\r\n        <Modal show={show} onHide={onClose} size=\"lg\" centered>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Select Products</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form.Control\r\n                    type=\"text\"\r\n                    placeholder=\"Search product\"\r\n                    value={searchTerm}\r\n                    onChange={(e) => setSearchTerm(e.target.value)}\r\n                    className=\"mb-3\"\r\n                />\r\n                <Table bordered>\r\n                    <thead>\r\n                        <tr>\r\n                            <th></th>\r\n                            <th>Product</th>\r\n                            <th>Variants</th>\r\n                            <th>Price</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {products.length > 0 ? products.map((product) => (\r\n                            <React.Fragment key={product.id}>\r\n                                <tr>\r\n                                    <td>\r\n                                        <Form.Check\r\n                                            type=\"checkbox\"\r\n                                            checked={selectedProducts.includes(product)}\r\n                                            onChange={() => handleSelectProduct(product)}\r\n                                        />\r\n                                    </td>\r\n                                    <td>\r\n                                        <Image src={product.image.src} thumbnail width={50} />{' '}\r\n                                        {product.title}\r\n                                    </td>\r\n                                    <td colSpan=\"2\"></td>\r\n                                </tr>\r\n                                {product.variants.map((variant) => (\r\n                                    <tr key={variant.id}>\r\n                                        <td></td>\r\n                                        <td></td>\r\n                                        <td>\r\n                                            <Form.Check\r\n                                                type=\"checkbox\"\r\n                                                checked={selectedVariants.some(v => v.id === variant.id)}\r\n                                                onChange={() => handleSelectVariant(variant, product)}\r\n                                            />\r\n                                            {variant.title}\r\n                                        </td>\r\n                                        <td>${variant.price}</td>\r\n                                    </tr>\r\n                                ))}\r\n                            </React.Fragment>\r\n                        )) : (\r\n                            <tr>\r\n                                <td colSpan=\"4\" className=\"text-center\">\r\n                                    No products found.\r\n                                </td>\r\n                            </tr>\r\n                        )}\r\n                    </tbody>\r\n                </Table>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={onClose}>\r\n                    Cancel\r\n                </Button>\r\n                <Button variant=\"primary\" onClick={handleAddProducts}>\r\n                    Add\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default ProductPickerDialog;\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}