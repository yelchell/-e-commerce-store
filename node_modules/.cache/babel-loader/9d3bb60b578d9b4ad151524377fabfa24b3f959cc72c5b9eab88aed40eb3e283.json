{"ast":null,"code":"import { createAnatomy } from '@zag-js/anatomy';\nimport { normalizeColor, getColorAreaGradient, parseColor } from '@zag-js/color-utils';\nimport { getRelativePoint, isLeftClick, isModifierKey, getEventPoint, getEventStep, getEventKey, trackPointerMove } from '@zag-js/dom-event';\nimport { createScope, queryAll, dataAttr, query, visuallyHiddenStyle, raf, getInitialFocus } from '@zag-js/dom-query';\nimport { getPlacementStyles, getPlacement } from '@zag-js/popper';\nimport { createMachine, guards } from '@zag-js/core';\nimport { trackDismissableElement } from '@zag-js/dismissable';\nimport { trackFormControl, dispatchInputValueEvent } from '@zag-js/form-utils';\nimport { disableTextSelection } from '@zag-js/text-selection';\nimport { compact, tryCatch } from '@zag-js/utils';\n\n// src/color-picker.anatomy.ts\nvar anatomy = createAnatomy(\"color-picker\", [\"root\", \"label\", \"control\", \"trigger\", \"positioner\", \"content\", \"area\", \"areaThumb\", \"valueText\", \"areaBackground\", \"channelSlider\", \"channelSliderLabel\", \"channelSliderTrack\", \"channelSliderThumb\", \"channelSliderValueText\", \"channelInput\", \"transparencyGrid\", \"swatchGroup\", \"swatchTrigger\", \"swatchIndicator\", \"swatch\", \"eyeDropperTrigger\", \"formatTrigger\", \"formatSelect\"]);\nvar parts = anatomy.build();\nvar dom = createScope({\n  getRootId: ctx => ctx.ids?.root ?? `color-picker:${ctx.id}`,\n  getLabelId: ctx => ctx.ids?.label ?? `color-picker:${ctx.id}:label`,\n  getHiddenInputId: ctx => ctx.ids?.hiddenInput ?? `color-picker:${ctx.id}:hidden-input`,\n  getControlId: ctx => ctx.ids?.control ?? `color-picker:${ctx.id}:control`,\n  getTriggerId: ctx => ctx.ids?.trigger ?? `color-picker:${ctx.id}:trigger`,\n  getContentId: ctx => ctx.ids?.content ?? `color-picker:${ctx.id}:content`,\n  getPositionerId: ctx => ctx.ids?.positioner ?? `color-picker:${ctx.id}:positioner`,\n  getFormatSelectId: ctx => ctx.ids?.formatSelect ?? `color-picker:${ctx.id}:format-select`,\n  getAreaId: ctx => ctx.ids?.area ?? `color-picker:${ctx.id}:area`,\n  getAreaGradientId: ctx => ctx.ids?.areaGradient ?? `color-picker:${ctx.id}:area-gradient`,\n  getAreaThumbId: ctx => ctx.ids?.areaThumb ?? `color-picker:${ctx.id}:area-thumb`,\n  getChannelSliderTrackId: (ctx, channel) => ctx.ids?.channelSliderTrack?.(channel) ?? `color-picker:${ctx.id}:slider-track:${channel}`,\n  getChannelSliderThumbId: (ctx, channel) => ctx.ids?.channelSliderThumb?.(channel) ?? `color-picker:${ctx.id}:slider-thumb:${channel}`,\n  getContentEl: ctx => dom.getById(ctx, dom.getContentId(ctx)),\n  getAreaThumbEl: ctx => dom.getById(ctx, dom.getAreaThumbId(ctx)),\n  getChannelSliderThumbEl: (ctx, channel) => dom.getById(ctx, dom.getChannelSliderThumbId(ctx, channel)),\n  getChannelInputEl: (ctx, channel) => {\n    const selector = `input[data-channel=\"${channel}\"]`;\n    return [...queryAll(dom.getContentEl(ctx), selector), ...queryAll(dom.getControlEl(ctx), selector)];\n  },\n  getFormatSelectEl: ctx => dom.getById(ctx, dom.getFormatSelectId(ctx)),\n  getHiddenInputEl: ctx => dom.getById(ctx, dom.getHiddenInputId(ctx)),\n  getAreaEl: ctx => dom.getById(ctx, dom.getAreaId(ctx)),\n  getAreaValueFromPoint(ctx, point) {\n    const areaEl = dom.getAreaEl(ctx);\n    if (!areaEl) return;\n    const {\n      percent\n    } = getRelativePoint(point, areaEl);\n    return percent;\n  },\n  getControlEl: ctx => dom.getById(ctx, dom.getControlId(ctx)),\n  getTriggerEl: ctx => dom.getById(ctx, dom.getTriggerId(ctx)),\n  getPositionerEl: ctx => dom.getById(ctx, dom.getPositionerId(ctx)),\n  getChannelSliderTrackEl: (ctx, channel) => {\n    return dom.getById(ctx, dom.getChannelSliderTrackId(ctx, channel));\n  },\n  getChannelSliderValueFromPoint(ctx, point, channel) {\n    const trackEl = dom.getChannelSliderTrackEl(ctx, channel);\n    if (!trackEl) return;\n    const {\n      percent\n    } = getRelativePoint(point, trackEl);\n    return percent;\n  },\n  getChannelInputEls: ctx => {\n    return [...queryAll(dom.getContentEl(ctx), \"input[data-channel]\"), ...queryAll(dom.getControlEl(ctx), \"input[data-channel]\")];\n  }\n});\nfunction getChannelDisplayColor(color, channel) {\n  switch (channel) {\n    case \"hue\":\n      return parseColor(`hsl(${color.getChannelValue(\"hue\")}, 100%, 50%)`);\n    case \"lightness\":\n    case \"brightness\":\n    case \"saturation\":\n    case \"red\":\n    case \"green\":\n    case \"blue\":\n      return color.withChannelValue(\"alpha\", 1);\n    case \"alpha\":\n      {\n        return color;\n      }\n    default:\n      throw new Error(\"Unknown color channel: \" + channel);\n  }\n}\nfunction getChannelValue(color, channel) {\n  if (channel == null) return \"\";\n  if (channel === \"hex\") {\n    return color.toString(\"hex\");\n  }\n  if (channel === \"css\") {\n    return color.toString(\"css\");\n  }\n  if (channel in color) {\n    return color.getChannelValue(channel).toString();\n  }\n  const isHSL = color.getFormat() === \"hsla\";\n  switch (channel) {\n    case \"hue\":\n      return isHSL ? color.toFormat(\"hsla\").getChannelValue(\"hue\").toString() : color.toFormat(\"hsba\").getChannelValue(\"hue\").toString();\n    case \"saturation\":\n      return isHSL ? color.toFormat(\"hsla\").getChannelValue(\"saturation\").toString() : color.toFormat(\"hsba\").getChannelValue(\"saturation\").toString();\n    case \"lightness\":\n      return color.toFormat(\"hsla\").getChannelValue(\"lightness\").toString();\n    case \"brightness\":\n      return color.toFormat(\"hsba\").getChannelValue(\"brightness\").toString();\n    case \"red\":\n    case \"green\":\n    case \"blue\":\n      return color.toFormat(\"rgba\").getChannelValue(channel).toString();\n    default:\n      return color.getChannelValue(channel).toString();\n  }\n}\nfunction getChannelRange(color, channel) {\n  switch (channel) {\n    case \"hex\":\n      const minColor = parseColor(\"#000000\");\n      const maxColor = parseColor(\"#FFFFFF\");\n      return {\n        minValue: minColor.toHexInt(),\n        maxValue: maxColor.toHexInt(),\n        pageSize: 10,\n        step: 1\n      };\n    case \"css\":\n      return void 0;\n    case \"hue\":\n    case \"saturation\":\n    case \"lightness\":\n      return color.toFormat(\"hsla\").getChannelRange(channel);\n    case \"brightness\":\n      return color.toFormat(\"hsba\").getChannelRange(channel);\n    case \"red\":\n    case \"green\":\n    case \"blue\":\n      return color.toFormat(\"rgba\").getChannelRange(channel);\n    default:\n      return color.getChannelRange(channel);\n  }\n}\n\n// src/utils/get-slider-background.ts\nfunction getSliderBackgroundDirection(orientation, dir) {\n  if (orientation === \"vertical\") {\n    return \"top\";\n  } else if (dir === \"ltr\") {\n    return \"right\";\n  } else {\n    return \"left\";\n  }\n}\nvar getSliderBackground = props => {\n  const {\n    channel,\n    value,\n    dir\n  } = props;\n  const bgDirection = getSliderBackgroundDirection(props.orientation, dir);\n  const {\n    minValue,\n    maxValue\n  } = value.getChannelRange(channel);\n  switch (channel) {\n    case \"hue\":\n      return `linear-gradient(to ${bgDirection}, rgb(255, 0, 0) 0%, rgb(255, 255, 0) 17%, rgb(0, 255, 0) 33%, rgb(0, 255, 255) 50%, rgb(0, 0, 255) 67%, rgb(255, 0, 255) 83%, rgb(255, 0, 0) 100%)`;\n    case \"lightness\":\n      {\n        let start = value.withChannelValue(channel, minValue).toString(\"css\");\n        let middle = value.withChannelValue(channel, (maxValue - minValue) / 2).toString(\"css\");\n        let end = value.withChannelValue(channel, maxValue).toString(\"css\");\n        return `linear-gradient(to ${bgDirection}, ${start}, ${middle}, ${end})`;\n      }\n    case \"saturation\":\n    case \"brightness\":\n    case \"red\":\n    case \"green\":\n    case \"blue\":\n    case \"alpha\":\n      {\n        let start = value.withChannelValue(channel, minValue).toString(\"css\");\n        let end = value.withChannelValue(channel, maxValue).toString(\"css\");\n        return `linear-gradient(to ${bgDirection}, ${start}, ${end})`;\n      }\n    default:\n      throw new Error(\"Unknown color channel: \" + channel);\n  }\n};\n\n// src/color-picker.connect.ts\nfunction connect(state, send, normalize) {\n  const value = state.context.value;\n  const areaValue = state.context.areaValue;\n  const valueAsString = state.context.valueAsString;\n  const disabled = state.context.isDisabled;\n  const interactive = state.context.isInteractive;\n  const dragging = state.hasTag(\"dragging\");\n  const open = state.hasTag(\"open\");\n  const focused = state.hasTag(\"focused\");\n  const getAreaChannels = props => {\n    const channels = areaValue.getChannels();\n    return {\n      xChannel: props.xChannel ?? channels[1],\n      yChannel: props.yChannel ?? channels[2]\n    };\n  };\n  const currentPlacement = state.context.currentPlacement;\n  const popperStyles = getPlacementStyles({\n    ...state.context.positioning,\n    placement: currentPlacement\n  });\n  function getSwatchTriggerState(props) {\n    const color = normalizeColor(props.value).toFormat(state.context.format);\n    return {\n      value: color,\n      valueAsString: color.toString(\"hex\"),\n      checked: color.isEqual(value),\n      disabled: props.disabled || !interactive\n    };\n  }\n  return {\n    dragging,\n    open,\n    valueAsString,\n    value,\n    setOpen(nextOpen) {\n      if (nextOpen === open) return;\n      send({\n        type: nextOpen ? \"OPEN\" : \"CLOSE\"\n      });\n    },\n    setValue(value2) {\n      send({\n        type: \"VALUE.SET\",\n        value: normalizeColor(value2),\n        src: \"set-color\"\n      });\n    },\n    getChannelValue(channel) {\n      return getChannelValue(value, channel);\n    },\n    getChannelValueText(channel, locale) {\n      return value.formatChannelValue(channel, locale);\n    },\n    setChannelValue(channel, channelValue) {\n      const color = value.withChannelValue(channel, channelValue);\n      send({\n        type: \"VALUE.SET\",\n        value: color,\n        src: \"set-channel\"\n      });\n    },\n    format: state.context.format,\n    setFormat(format) {\n      const formatValue = value.toFormat(format);\n      send({\n        type: \"VALUE.SET\",\n        value: formatValue,\n        src: \"set-format\"\n      });\n    },\n    alpha: value.getChannelValue(\"alpha\"),\n    setAlpha(alphaValue) {\n      const color = value.withChannelValue(\"alpha\", alphaValue);\n      send({\n        type: \"VALUE.SET\",\n        value: color,\n        src: \"set-alpha\"\n      });\n    },\n    getRootProps() {\n      return normalize.element({\n        ...parts.root.attrs,\n        dir: state.context.dir,\n        id: dom.getRootId(state.context),\n        \"data-disabled\": dataAttr(disabled),\n        \"data-readonly\": dataAttr(state.context.readOnly),\n        style: {\n          \"--value\": value.toString(\"css\")\n        }\n      });\n    },\n    getLabelProps() {\n      return normalize.element({\n        ...parts.label.attrs,\n        dir: state.context.dir,\n        id: dom.getLabelId(state.context),\n        htmlFor: dom.getHiddenInputId(state.context),\n        \"data-disabled\": dataAttr(disabled),\n        \"data-readonly\": dataAttr(state.context.readOnly),\n        \"data-focus\": dataAttr(focused),\n        onClick(event) {\n          event.preventDefault();\n          const inputEl = query(dom.getControlEl(state.context), \"[data-channel=hex]\");\n          inputEl?.focus({\n            preventScroll: true\n          });\n        }\n      });\n    },\n    getControlProps() {\n      return normalize.element({\n        ...parts.control.attrs,\n        id: dom.getControlId(state.context),\n        dir: state.context.dir,\n        \"data-disabled\": dataAttr(disabled),\n        \"data-readonly\": dataAttr(state.context.readOnly),\n        \"data-state\": open ? \"open\" : \"closed\",\n        \"data-focus\": dataAttr(focused)\n      });\n    },\n    getTriggerProps() {\n      return normalize.button({\n        ...parts.trigger.attrs,\n        id: dom.getTriggerId(state.context),\n        dir: state.context.dir,\n        disabled,\n        \"aria-label\": `select color. current color is ${valueAsString}`,\n        \"aria-controls\": dom.getContentId(state.context),\n        \"aria-labelledby\": dom.getLabelId(state.context),\n        \"data-disabled\": dataAttr(disabled),\n        \"data-readonly\": dataAttr(state.context.readOnly),\n        \"data-placement\": currentPlacement,\n        \"aria-expanded\": dataAttr(open),\n        \"data-state\": open ? \"open\" : \"closed\",\n        \"data-focus\": dataAttr(focused),\n        type: \"button\",\n        onClick() {\n          if (!interactive) return;\n          send({\n            type: \"TRIGGER.CLICK\"\n          });\n        },\n        onBlur() {\n          if (!interactive) return;\n          send({\n            type: \"TRIGGER.BLUR\"\n          });\n        },\n        style: {\n          position: \"relative\"\n        }\n      });\n    },\n    getPositionerProps() {\n      return normalize.element({\n        ...parts.positioner.attrs,\n        id: dom.getPositionerId(state.context),\n        dir: state.context.dir,\n        style: popperStyles.floating\n      });\n    },\n    getContentProps() {\n      return normalize.element({\n        ...parts.content.attrs,\n        id: dom.getContentId(state.context),\n        dir: state.context.dir,\n        \"data-placement\": currentPlacement,\n        \"data-state\": open ? \"open\" : \"closed\",\n        hidden: !open\n      });\n    },\n    getValueTextProps() {\n      return normalize.element({\n        ...parts.valueText.attrs,\n        dir: state.context.dir,\n        \"data-disabled\": dataAttr(disabled),\n        \"data-focus\": dataAttr(focused)\n      });\n    },\n    getAreaProps(props = {}) {\n      const {\n        xChannel,\n        yChannel\n      } = getAreaChannels(props);\n      const {\n        areaStyles\n      } = getColorAreaGradient(areaValue, {\n        xChannel,\n        yChannel,\n        dir: state.context.dir\n      });\n      return normalize.element({\n        ...parts.area.attrs,\n        id: dom.getAreaId(state.context),\n        role: \"group\",\n        onPointerDown(event) {\n          if (!interactive) return;\n          if (!isLeftClick(event)) return;\n          if (isModifierKey(event)) return;\n          const point = getEventPoint(event);\n          const channel = {\n            xChannel,\n            yChannel\n          };\n          send({\n            type: \"AREA.POINTER_DOWN\",\n            point,\n            channel,\n            id: \"area\"\n          });\n          event.preventDefault();\n        },\n        style: {\n          position: \"relative\",\n          touchAction: \"none\",\n          forcedColorAdjust: \"none\",\n          ...areaStyles\n        }\n      });\n    },\n    getAreaBackgroundProps(props = {}) {\n      const {\n        xChannel,\n        yChannel\n      } = getAreaChannels(props);\n      const {\n        areaGradientStyles\n      } = getColorAreaGradient(areaValue, {\n        xChannel,\n        yChannel,\n        dir: state.context.dir\n      });\n      return normalize.element({\n        ...parts.areaBackground.attrs,\n        id: dom.getAreaGradientId(state.context),\n        style: {\n          position: \"relative\",\n          touchAction: \"none\",\n          forcedColorAdjust: \"none\",\n          ...areaGradientStyles\n        }\n      });\n    },\n    getAreaThumbProps(props = {}) {\n      const {\n        xChannel,\n        yChannel\n      } = getAreaChannels(props);\n      const channel = {\n        xChannel,\n        yChannel\n      };\n      const xPercent = areaValue.getChannelValuePercent(xChannel);\n      const yPercent = 1 - areaValue.getChannelValuePercent(yChannel);\n      const xValue = areaValue.getChannelValue(xChannel);\n      const yValue = areaValue.getChannelValue(yChannel);\n      return normalize.element({\n        ...parts.areaThumb.attrs,\n        id: dom.getAreaThumbId(state.context),\n        dir: state.context.dir,\n        tabIndex: disabled ? void 0 : 0,\n        \"data-disabled\": dataAttr(disabled),\n        role: \"slider\",\n        \"aria-valuemin\": 0,\n        \"aria-valuemax\": 100,\n        \"aria-valuenow\": xValue,\n        \"aria-label\": `${xChannel} and ${yChannel}`,\n        \"aria-roledescription\": \"2d slider\",\n        \"aria-valuetext\": `${xChannel} ${xValue}, ${yChannel} ${yValue}`,\n        style: {\n          position: \"absolute\",\n          left: `${xPercent * 100}%`,\n          top: `${yPercent * 100}%`,\n          transform: \"translate(-50%, -50%)\",\n          touchAction: \"none\",\n          forcedColorAdjust: \"none\",\n          background: areaValue.withChannelValue(\"alpha\", 1).toString(\"css\")\n        },\n        onFocus() {\n          if (!interactive) return;\n          send({\n            type: \"AREA.FOCUS\",\n            id: \"area\",\n            channel\n          });\n        },\n        onKeyDown(event) {\n          if (event.defaultPrevented) return;\n          if (!interactive) return;\n          const step = getEventStep(event);\n          const keyMap = {\n            ArrowUp() {\n              send({\n                type: \"AREA.ARROW_UP\",\n                channel,\n                step\n              });\n            },\n            ArrowDown() {\n              send({\n                type: \"AREA.ARROW_DOWN\",\n                channel,\n                step\n              });\n            },\n            ArrowLeft() {\n              send({\n                type: \"AREA.ARROW_LEFT\",\n                channel,\n                step\n              });\n            },\n            ArrowRight() {\n              send({\n                type: \"AREA.ARROW_RIGHT\",\n                channel,\n                step\n              });\n            },\n            PageUp() {\n              send({\n                type: \"AREA.PAGE_UP\",\n                channel,\n                step\n              });\n            },\n            PageDown() {\n              send({\n                type: \"AREA.PAGE_DOWN\",\n                channel,\n                step\n              });\n            },\n            Escape(event2) {\n              event2.stopPropagation();\n            }\n          };\n          const exec = keyMap[getEventKey(event, state.context)];\n          if (exec) {\n            exec(event);\n            event.preventDefault();\n          }\n        }\n      });\n    },\n    getTransparencyGridProps(props = {}) {\n      const {\n        size = \"12px\"\n      } = props;\n      return normalize.element({\n        ...parts.transparencyGrid.attrs,\n        style: {\n          \"--size\": size,\n          width: \"100%\",\n          height: \"100%\",\n          position: \"absolute\",\n          backgroundColor: \"#fff\",\n          backgroundImage: \"conic-gradient(#eeeeee 0 25%, transparent 0 50%, #eeeeee 0 75%, transparent 0)\",\n          backgroundSize: \"var(--size) var(--size)\",\n          inset: \"0px\",\n          zIndex: \"auto\",\n          pointerEvents: \"none\"\n        }\n      });\n    },\n    getChannelSliderProps(props) {\n      const {\n        orientation = \"horizontal\",\n        channel,\n        format\n      } = props;\n      return normalize.element({\n        ...parts.channelSlider.attrs,\n        \"data-channel\": channel,\n        \"data-orientation\": orientation,\n        role: \"presentation\",\n        onPointerDown(event) {\n          if (!interactive) return;\n          if (!isLeftClick(event)) return;\n          if (isModifierKey(event)) return;\n          const point = getEventPoint(event);\n          send({\n            type: \"CHANNEL_SLIDER.POINTER_DOWN\",\n            channel,\n            format,\n            point,\n            id: channel,\n            orientation\n          });\n          event.preventDefault();\n        },\n        style: {\n          position: \"relative\",\n          touchAction: \"none\"\n        }\n      });\n    },\n    getChannelSliderTrackProps(props) {\n      const {\n        orientation = \"horizontal\",\n        channel,\n        format\n      } = props;\n      const normalizedValue = format ? value.toFormat(format) : areaValue;\n      return normalize.element({\n        ...parts.channelSliderTrack.attrs,\n        id: dom.getChannelSliderTrackId(state.context, channel),\n        role: \"group\",\n        \"data-channel\": channel,\n        \"data-orientation\": orientation,\n        style: {\n          position: \"relative\",\n          forcedColorAdjust: \"none\",\n          backgroundImage: getSliderBackground({\n            orientation,\n            channel,\n            dir: state.context.dir,\n            value: normalizedValue\n          })\n        }\n      });\n    },\n    getChannelSliderLabelProps(props) {\n      const {\n        channel\n      } = props;\n      return normalize.element({\n        ...parts.channelSliderLabel.attrs,\n        \"data-channel\": channel,\n        onClick(event) {\n          if (!interactive) return;\n          event.preventDefault();\n          const thumbId = dom.getChannelSliderThumbId(state.context, channel);\n          dom.getById(state.context, thumbId)?.focus({\n            preventScroll: true\n          });\n        },\n        style: {\n          userSelect: \"none\",\n          WebkitUserSelect: \"none\"\n        }\n      });\n    },\n    getChannelSliderValueTextProps(props) {\n      return normalize.element({\n        ...parts.channelSliderValueText.attrs,\n        \"data-channel\": props.channel\n      });\n    },\n    getChannelSliderThumbProps(props) {\n      const {\n        orientation = \"horizontal\",\n        channel,\n        format\n      } = props;\n      const normalizedValue = format ? value.toFormat(format) : areaValue;\n      const channelRange = normalizedValue.getChannelRange(channel);\n      const channelValue = normalizedValue.getChannelValue(channel);\n      const offset = (channelValue - channelRange.minValue) / (channelRange.maxValue - channelRange.minValue);\n      const placementStyles = orientation === \"horizontal\" ? {\n        left: `${offset * 100}%`,\n        top: \"50%\"\n      } : {\n        top: `${offset * 100}%`,\n        left: \"50%\"\n      };\n      return normalize.element({\n        ...parts.channelSliderThumb.attrs,\n        id: dom.getChannelSliderThumbId(state.context, channel),\n        role: \"slider\",\n        \"aria-label\": channel,\n        tabIndex: disabled ? void 0 : 0,\n        \"data-channel\": channel,\n        \"data-disabled\": dataAttr(disabled),\n        \"data-orientation\": orientation,\n        \"aria-disabled\": dataAttr(disabled),\n        \"aria-orientation\": orientation,\n        \"aria-valuemax\": channelRange.maxValue,\n        \"aria-valuemin\": channelRange.minValue,\n        \"aria-valuenow\": channelValue,\n        \"aria-valuetext\": `${channel} ${channelValue}`,\n        style: {\n          forcedColorAdjust: \"none\",\n          position: \"absolute\",\n          background: getChannelDisplayColor(areaValue, channel).toString(\"css\"),\n          ...placementStyles\n        },\n        onFocus() {\n          if (!interactive) return;\n          send({\n            type: \"CHANNEL_SLIDER.FOCUS\",\n            channel\n          });\n        },\n        onKeyDown(event) {\n          if (event.defaultPrevented) return;\n          if (!interactive) return;\n          const step = getEventStep(event) * channelRange.step;\n          const keyMap = {\n            ArrowUp() {\n              send({\n                type: \"CHANNEL_SLIDER.ARROW_UP\",\n                channel,\n                step\n              });\n            },\n            ArrowDown() {\n              send({\n                type: \"CHANNEL_SLIDER.ARROW_DOWN\",\n                channel,\n                step\n              });\n            },\n            ArrowLeft() {\n              send({\n                type: \"CHANNEL_SLIDER.ARROW_LEFT\",\n                channel,\n                step\n              });\n            },\n            ArrowRight() {\n              send({\n                type: \"CHANNEL_SLIDER.ARROW_RIGHT\",\n                channel,\n                step\n              });\n            },\n            PageUp() {\n              send({\n                type: \"CHANNEL_SLIDER.PAGE_UP\",\n                channel\n              });\n            },\n            PageDown() {\n              send({\n                type: \"CHANNEL_SLIDER.PAGE_DOWN\",\n                channel\n              });\n            },\n            Home() {\n              send({\n                type: \"CHANNEL_SLIDER.HOME\",\n                channel\n              });\n            },\n            End() {\n              send({\n                type: \"CHANNEL_SLIDER.END\",\n                channel\n              });\n            },\n            Escape(event2) {\n              event2.stopPropagation();\n            }\n          };\n          const exec = keyMap[getEventKey(event, state.context)];\n          if (exec) {\n            exec(event);\n            event.preventDefault();\n          }\n        }\n      });\n    },\n    getChannelInputProps(props) {\n      const {\n        channel\n      } = props;\n      const isTextField = channel === \"hex\" || channel === \"css\";\n      const channelRange = getChannelRange(value, channel);\n      return normalize.input({\n        ...parts.channelInput.attrs,\n        dir: state.context.dir,\n        type: isTextField ? \"text\" : \"number\",\n        \"data-channel\": channel,\n        \"aria-label\": channel,\n        spellCheck: false,\n        autoComplete: \"off\",\n        disabled,\n        \"data-disabled\": dataAttr(disabled),\n        readOnly: state.context.readOnly,\n        defaultValue: getChannelValue(value, channel),\n        min: channelRange?.minValue,\n        max: channelRange?.maxValue,\n        step: channelRange?.step,\n        onBeforeInput(event) {\n          if (isTextField || !interactive) return;\n          const value2 = event.currentTarget.value;\n          if (value2.match(/[^0-9.]/g)) {\n            event.preventDefault();\n          }\n        },\n        onFocus(event) {\n          if (!interactive) return;\n          send({\n            type: \"CHANNEL_INPUT.FOCUS\",\n            channel\n          });\n          event.currentTarget.select();\n        },\n        onBlur(event) {\n          if (!interactive) return;\n          const value2 = isTextField ? event.currentTarget.value : event.currentTarget.valueAsNumber;\n          send({\n            type: \"CHANNEL_INPUT.BLUR\",\n            channel,\n            value: value2,\n            isTextField\n          });\n        },\n        onKeyDown(event) {\n          if (event.defaultPrevented) return;\n          if (!interactive) return;\n          if (event.key === \"Enter\") {\n            const value2 = isTextField ? event.currentTarget.value : event.currentTarget.valueAsNumber;\n            send({\n              type: \"CHANNEL_INPUT.CHANGE\",\n              channel,\n              value: value2,\n              isTextField\n            });\n            event.preventDefault();\n          }\n        },\n        style: {\n          appearance: \"none\",\n          WebkitAppearance: \"none\",\n          MozAppearance: \"textfield\"\n        }\n      });\n    },\n    getHiddenInputProps() {\n      return normalize.input({\n        type: \"text\",\n        disabled,\n        name: state.context.name,\n        readOnly: state.context.readOnly,\n        required: state.context.required,\n        id: dom.getHiddenInputId(state.context),\n        style: visuallyHiddenStyle,\n        defaultValue: valueAsString\n      });\n    },\n    getEyeDropperTriggerProps() {\n      return normalize.button({\n        ...parts.eyeDropperTrigger.attrs,\n        type: \"button\",\n        dir: state.context.dir,\n        disabled,\n        \"data-disabled\": dataAttr(disabled),\n        \"aria-label\": \"Pick a color from the screen\",\n        onClick() {\n          if (!interactive) return;\n          send(\"EYEDROPPER.CLICK\");\n        }\n      });\n    },\n    getSwatchGroupProps() {\n      return normalize.element({\n        ...parts.swatchGroup.attrs,\n        role: \"group\"\n      });\n    },\n    getSwatchTriggerState,\n    getSwatchTriggerProps(props) {\n      const swatchState = getSwatchTriggerState(props);\n      return normalize.button({\n        ...parts.swatchTrigger.attrs,\n        disabled: swatchState.disabled,\n        dir: state.context.dir,\n        type: \"button\",\n        \"aria-label\": `select ${swatchState.valueAsString} as the color`,\n        \"data-state\": swatchState.checked ? \"checked\" : \"unchecked\",\n        \"data-value\": swatchState.valueAsString,\n        \"data-disabled\": dataAttr(swatchState.disabled),\n        onClick() {\n          if (swatchState.disabled) return;\n          send({\n            type: \"SWATCH_TRIGGER.CLICK\",\n            value: swatchState.value\n          });\n        },\n        style: {\n          position: \"relative\"\n        }\n      });\n    },\n    getSwatchIndicatorProps(props) {\n      const swatchState = getSwatchTriggerState(props);\n      return normalize.element({\n        ...parts.swatchIndicator.attrs,\n        dir: state.context.dir,\n        hidden: !swatchState.checked\n      });\n    },\n    getSwatchProps(props) {\n      const {\n        respectAlpha = true\n      } = props;\n      const swatchState = getSwatchTriggerState(props);\n      return normalize.element({\n        ...parts.swatch.attrs,\n        dir: state.context.dir,\n        \"data-state\": swatchState.checked ? \"checked\" : \"unchecked\",\n        \"data-value\": swatchState.valueAsString,\n        style: {\n          position: \"relative\",\n          background: swatchState.value.toString(respectAlpha ? \"css\" : \"hex\")\n        }\n      });\n    },\n    getFormatTriggerProps() {\n      return normalize.button({\n        ...parts.formatTrigger.attrs,\n        dir: state.context.dir,\n        type: \"button\",\n        \"aria-label\": `change color format to ${getNextFormat(state.context.format)}`,\n        onClick(event) {\n          if (event.currentTarget.disabled) return;\n          const nextFormat = getNextFormat(state.context.format);\n          send({\n            type: \"FORMAT.SET\",\n            format: nextFormat,\n            src: \"format-trigger\"\n          });\n        }\n      });\n    },\n    getFormatSelectProps() {\n      return normalize.select({\n        ...parts.formatSelect.attrs,\n        \"aria-label\": \"change color format\",\n        dir: state.context.dir,\n        defaultValue: state.context.format,\n        disabled,\n        onChange(event) {\n          const format = assertFormat(event.currentTarget.value);\n          send({\n            type: \"FORMAT.SET\",\n            format,\n            src: \"format-select\"\n          });\n        }\n      });\n    }\n  };\n}\nvar formats = [\"hsba\", \"hsla\", \"rgba\"];\nvar formatRegex = new RegExp(`^(${formats.join(\"|\")})$`);\nfunction getNextFormat(format) {\n  const index = formats.indexOf(format);\n  return formats[index + 1] ?? formats[0];\n}\nfunction assertFormat(format) {\n  if (formatRegex.test(format)) return format;\n  throw new Error(`Unsupported color format: ${format}`);\n}\nvar parse = colorString => {\n  return parseColor(colorString);\n};\n\n// src/color-picker.machine.ts\nvar {\n  and\n} = guards;\nfunction machine(userContext) {\n  const ctx = compact(userContext);\n  return createMachine({\n    id: \"color-picker\",\n    initial: ctx.open ? \"open\" : \"idle\",\n    context: {\n      dir: \"ltr\",\n      value: parse(\"#000000\"),\n      format: \"rgba\",\n      disabled: false,\n      closeOnSelect: false,\n      ...ctx,\n      activeId: null,\n      activeChannel: null,\n      activeOrientation: null,\n      fieldsetDisabled: false,\n      restoreFocus: true,\n      positioning: {\n        ...ctx.positioning,\n        placement: \"bottom\"\n      }\n    },\n    computed: {\n      isRtl: ctx2 => ctx2.dir === \"rtl\",\n      isDisabled: ctx2 => !!ctx2.disabled || ctx2.fieldsetDisabled,\n      isInteractive: ctx2 => !(ctx2.isDisabled || ctx2.readOnly),\n      valueAsString: ctx2 => ctx2.value.toString(ctx2.format),\n      areaValue: ctx2 => {\n        const format = ctx2.format.startsWith(\"hsl\") ? \"hsla\" : \"hsba\";\n        return ctx2.value.toFormat(format);\n      }\n    },\n    activities: [\"trackFormControl\"],\n    watch: {\n      value: [\"syncInputElements\"],\n      format: [\"syncFormatSelectElement\"],\n      open: [\"toggleVisibility\"]\n    },\n    on: {\n      \"VALUE.SET\": {\n        actions: [\"setValue\"]\n      },\n      \"FORMAT.SET\": {\n        actions: [\"setFormat\"]\n      },\n      \"CHANNEL_INPUT.CHANGE\": {\n        actions: [\"setChannelColorFromInput\"]\n      },\n      \"EYEDROPPER.CLICK\": {\n        actions: [\"openEyeDropper\"]\n      }\n    },\n    states: {\n      idle: {\n        tags: [\"closed\"],\n        on: {\n          \"CONTROLLED.OPEN\": {\n            target: \"open\",\n            actions: [\"setInitialFocus\"]\n          },\n          OPEN: [{\n            guard: \"isOpenControlled\",\n            actions: [\"invokeOnOpen\"]\n          }, {\n            target: \"open\",\n            actions: [\"invokeOnOpen\", \"setInitialFocus\"]\n          }],\n          \"TRIGGER.CLICK\": [{\n            guard: \"isOpenControlled\",\n            actions: [\"invokeOnOpen\"]\n          }, {\n            target: \"open\",\n            actions: [\"invokeOnOpen\", \"setInitialFocus\"]\n          }],\n          \"CHANNEL_INPUT.FOCUS\": {\n            target: \"focused\",\n            actions: [\"setActiveChannel\"]\n          }\n        }\n      },\n      focused: {\n        tags: [\"closed\", \"focused\"],\n        on: {\n          \"CONTROLLED.OPEN\": {\n            target: \"open\",\n            actions: [\"setInitialFocus\"]\n          },\n          OPEN: [{\n            guard: \"isOpenControlled\",\n            actions: [\"invokeOnOpen\"]\n          }, {\n            target: \"open\",\n            actions: [\"invokeOnOpen\", \"setInitialFocus\"]\n          }],\n          \"TRIGGER.CLICK\": [{\n            guard: \"isOpenControlled\",\n            actions: [\"invokeOnOpen\"]\n          }, {\n            target: \"open\",\n            actions: [\"invokeOnOpen\", \"setInitialFocus\"]\n          }],\n          \"CHANNEL_INPUT.FOCUS\": {\n            actions: [\"setActiveChannel\"]\n          },\n          \"CHANNEL_INPUT.BLUR\": {\n            target: \"idle\",\n            actions: [\"setChannelColorFromInput\"]\n          },\n          \"TRIGGER.BLUR\": {\n            target: \"idle\"\n          }\n        }\n      },\n      open: {\n        tags: [\"open\"],\n        activities: [\"trackPositioning\", \"trackDismissableElement\"],\n        on: {\n          \"CONTROLLED.CLOSE\": [{\n            guard: \"shouldRestoreFocus\",\n            target: \"focused\",\n            actions: [\"setReturnFocus\"]\n          }, {\n            target: \"idle\"\n          }],\n          \"TRIGGER.CLICK\": [{\n            guard: \"isOpenControlled\",\n            actions: [\"invokeOnClose\"]\n          }, {\n            target: \"idle\",\n            actions: [\"invokeOnClose\"]\n          }],\n          \"AREA.POINTER_DOWN\": {\n            target: \"open:dragging\",\n            actions: [\"setActiveChannel\", \"setAreaColorFromPoint\", \"focusAreaThumb\"]\n          },\n          \"AREA.FOCUS\": {\n            actions: [\"setActiveChannel\"]\n          },\n          \"CHANNEL_SLIDER.POINTER_DOWN\": {\n            target: \"open:dragging\",\n            actions: [\"setActiveChannel\", \"setChannelColorFromPoint\", \"focusChannelThumb\"]\n          },\n          \"CHANNEL_SLIDER.FOCUS\": {\n            actions: [\"setActiveChannel\"]\n          },\n          \"AREA.ARROW_LEFT\": {\n            actions: [\"decrementAreaXChannel\"]\n          },\n          \"AREA.ARROW_RIGHT\": {\n            actions: [\"incrementAreaXChannel\"]\n          },\n          \"AREA.ARROW_UP\": {\n            actions: [\"incrementAreaYChannel\"]\n          },\n          \"AREA.ARROW_DOWN\": {\n            actions: [\"decrementAreaYChannel\"]\n          },\n          \"AREA.PAGE_UP\": {\n            actions: [\"incrementAreaXChannel\"]\n          },\n          \"AREA.PAGE_DOWN\": {\n            actions: [\"decrementAreaXChannel\"]\n          },\n          \"CHANNEL_SLIDER.ARROW_LEFT\": {\n            actions: [\"decrementChannel\"]\n          },\n          \"CHANNEL_SLIDER.ARROW_RIGHT\": {\n            actions: [\"incrementChannel\"]\n          },\n          \"CHANNEL_SLIDER.ARROW_UP\": {\n            actions: [\"incrementChannel\"]\n          },\n          \"CHANNEL_SLIDER.ARROW_DOWN\": {\n            actions: [\"decrementChannel\"]\n          },\n          \"CHANNEL_SLIDER.PAGE_UP\": {\n            actions: [\"incrementChannel\"]\n          },\n          \"CHANNEL_SLIDER.PAGE_DOWN\": {\n            actions: [\"decrementChannel\"]\n          },\n          \"CHANNEL_SLIDER.HOME\": {\n            actions: [\"setChannelToMin\"]\n          },\n          \"CHANNEL_SLIDER.END\": {\n            actions: [\"setChannelToMax\"]\n          },\n          \"CHANNEL_INPUT.BLUR\": {\n            actions: [\"setChannelColorFromInput\"]\n          },\n          INTERACT_OUTSIDE: [{\n            guard: \"isOpenControlled\",\n            actions: [\"invokeOnClose\"]\n          }, {\n            guard: \"shouldRestoreFocus\",\n            target: \"focused\",\n            actions: [\"invokeOnClose\", \"setReturnFocus\"]\n          }, {\n            target: \"idle\",\n            actions: [\"invokeOnClose\"]\n          }],\n          CLOSE: [{\n            guard: \"isOpenControlled\",\n            actions: [\"invokeOnClose\"]\n          }, {\n            target: \"idle\",\n            actions: [\"invokeOnClose\"]\n          }],\n          \"SWATCH_TRIGGER.CLICK\": [{\n            guard: and(\"isOpenControlled\", \"closeOnSelect\"),\n            actions: [\"setValue\", \"invokeOnClose\"]\n          }, {\n            guard: \"closeOnSelect\",\n            target: \"focused\",\n            actions: [\"setValue\", \"invokeOnClose\", \"setReturnFocus\"]\n          }, {\n            actions: [\"setValue\"]\n          }]\n        }\n      },\n      \"open:dragging\": {\n        tags: [\"open\"],\n        exit: [\"clearActiveChannel\"],\n        activities: [\"trackPointerMove\", \"disableTextSelection\", \"trackPositioning\", \"trackDismissableElement\"],\n        on: {\n          \"CONTROLLED.CLOSE\": [{\n            guard: \"shouldRestoreFocus\",\n            target: \"focused\",\n            actions: [\"setReturnFocus\"]\n          }, {\n            target: \"idle\"\n          }],\n          \"AREA.POINTER_MOVE\": {\n            actions: [\"setAreaColorFromPoint\", \"focusAreaThumb\"]\n          },\n          \"AREA.POINTER_UP\": {\n            target: \"open\",\n            actions: [\"invokeOnChangeEnd\"]\n          },\n          \"CHANNEL_SLIDER.POINTER_MOVE\": {\n            actions: [\"setChannelColorFromPoint\", \"focusChannelThumb\"]\n          },\n          \"CHANNEL_SLIDER.POINTER_UP\": {\n            target: \"open\",\n            actions: [\"invokeOnChangeEnd\"]\n          },\n          INTERACT_OUTSIDE: [{\n            guard: \"isOpenControlled\",\n            actions: [\"invokeOnClose\"]\n          }, {\n            guard: \"shouldRestoreFocus\",\n            target: \"focused\",\n            actions: [\"invokeOnClose\", \"setReturnFocus\"]\n          }, {\n            target: \"idle\",\n            actions: [\"invokeOnClose\"]\n          }],\n          CLOSE: [{\n            guard: \"isOpenControlled\",\n            actions: [\"invokeOnClose\"]\n          }, {\n            target: \"idle\",\n            actions: [\"invokeOnClose\"]\n          }]\n        }\n      }\n    }\n  }, {\n    guards: {\n      closeOnSelect: ctx2 => !!ctx2.closeOnSelect,\n      isOpenControlled: ctx2 => !!ctx2[\"open.controlled\"],\n      shouldRestoreFocus: ctx2 => !!ctx2.restoreFocus\n    },\n    activities: {\n      trackPositioning(ctx2) {\n        ctx2.currentPlacement = ctx2.positioning.placement;\n        const anchorEl = dom.getTriggerEl(ctx2);\n        const getPositionerEl = () => dom.getPositionerEl(ctx2);\n        return getPlacement(anchorEl, getPositionerEl, {\n          ...ctx2.positioning,\n          defer: true,\n          onComplete(data) {\n            ctx2.currentPlacement = data.placement;\n          }\n        });\n      },\n      trackDismissableElement(ctx2, _evt, {\n        send\n      }) {\n        const getContentEl = () => dom.getContentEl(ctx2);\n        return trackDismissableElement(getContentEl, {\n          exclude: dom.getTriggerEl(ctx2),\n          defer: true,\n          onInteractOutside(event) {\n            ctx2.onInteractOutside?.(event);\n            if (event.defaultPrevented) return;\n            ctx2.restoreFocus = !(event.detail.focusable || event.detail.contextmenu);\n          },\n          onPointerDownOutside: ctx2.onPointerDownOutside,\n          onFocusOutside: ctx2.onFocusOutside,\n          onDismiss() {\n            send({\n              type: \"INTERACT_OUTSIDE\"\n            });\n          }\n        });\n      },\n      trackFormControl(ctx2, _evt, {\n        send,\n        initialContext\n      }) {\n        const inputEl = dom.getHiddenInputEl(ctx2);\n        return trackFormControl(inputEl, {\n          onFieldsetDisabledChange(disabled) {\n            ctx2.fieldsetDisabled = disabled;\n          },\n          onFormReset() {\n            send({\n              type: \"VALUE.SET\",\n              value: initialContext.value,\n              src: \"form.reset\"\n            });\n          }\n        });\n      },\n      trackPointerMove(ctx2, evt, {\n        send\n      }) {\n        return trackPointerMove(dom.getDoc(ctx2), {\n          onPointerMove({\n            point\n          }) {\n            const type = ctx2.activeId === \"area\" ? \"AREA.POINTER_MOVE\" : \"CHANNEL_SLIDER.POINTER_MOVE\";\n            send({\n              type,\n              point,\n              format: evt.format\n            });\n          },\n          onPointerUp() {\n            const type = ctx2.activeId === \"area\" ? \"AREA.POINTER_UP\" : \"CHANNEL_SLIDER.POINTER_UP\";\n            send({\n              type\n            });\n          }\n        });\n      },\n      disableTextSelection(ctx2) {\n        return disableTextSelection({\n          doc: dom.getDoc(ctx2),\n          target: dom.getContentEl(ctx2)\n        });\n      }\n    },\n    actions: {\n      openEyeDropper(ctx2) {\n        const isSupported = \"EyeDropper\" in dom.getWin(ctx2);\n        if (!isSupported) return;\n        const win = dom.getWin(ctx2);\n        const picker = new win.EyeDropper();\n        picker.open().then(({\n          sRGBHex\n        }) => {\n          const format = ctx2.value.getFormat();\n          const color = parseColor(sRGBHex).toFormat(format);\n          set.value(ctx2, color);\n          ctx2.onValueChangeEnd?.({\n            value: ctx2.value,\n            valueAsString: ctx2.valueAsString\n          });\n        }).catch(() => void 0);\n      },\n      setActiveChannel(ctx2, evt) {\n        ctx2.activeId = evt.id;\n        if (evt.channel) ctx2.activeChannel = evt.channel;\n        if (evt.orientation) ctx2.activeOrientation = evt.orientation;\n      },\n      clearActiveChannel(ctx2) {\n        ctx2.activeChannel = null;\n        ctx2.activeId = null;\n        ctx2.activeOrientation = null;\n      },\n      setAreaColorFromPoint(ctx2, evt) {\n        const normalizedValue = evt.format ? ctx2.value.toFormat(evt.format) : ctx2.areaValue;\n        const {\n          xChannel,\n          yChannel\n        } = evt.channel || ctx2.activeChannel;\n        const percent = dom.getAreaValueFromPoint(ctx2, evt.point);\n        if (!percent) return;\n        const xValue = normalizedValue.getChannelPercentValue(xChannel, percent.x);\n        const yValue = normalizedValue.getChannelPercentValue(yChannel, 1 - percent.y);\n        const color = normalizedValue.withChannelValue(xChannel, xValue).withChannelValue(yChannel, yValue);\n        set.value(ctx2, color);\n      },\n      setChannelColorFromPoint(ctx2, evt) {\n        const channel = evt.channel || ctx2.activeId;\n        const normalizedValue = evt.format ? ctx2.value.toFormat(evt.format) : ctx2.areaValue;\n        const percent = dom.getChannelSliderValueFromPoint(ctx2, evt.point, channel);\n        if (!percent) return;\n        const orientation = ctx2.activeOrientation || \"horizontal\";\n        const channelPercent = orientation === \"horizontal\" ? percent.x : percent.y;\n        const value = normalizedValue.getChannelPercentValue(channel, channelPercent);\n        const color = normalizedValue.withChannelValue(channel, value);\n        set.value(ctx2, color);\n      },\n      setValue(ctx2, evt) {\n        set.value(ctx2, evt.value);\n      },\n      setFormat(ctx2, evt) {\n        set.format(ctx2, evt.format);\n      },\n      syncInputElements(ctx2) {\n        sync.inputs(ctx2);\n      },\n      invokeOnChangeEnd(ctx2) {\n        invoke.changeEnd(ctx2);\n      },\n      setChannelColorFromInput(ctx2, evt) {\n        const {\n          channel,\n          isTextField,\n          value\n        } = evt;\n        const currentAlpha = ctx2.value.getChannelValue(\"alpha\");\n        let color;\n        if (channel === \"alpha\") {\n          let valueAsNumber = parseFloat(value);\n          valueAsNumber = Number.isNaN(valueAsNumber) ? currentAlpha : valueAsNumber;\n          color = ctx2.value.withChannelValue(\"alpha\", valueAsNumber);\n        } else if (isTextField) {\n          color = tryCatch(() => parse(value).withChannelValue(\"alpha\", currentAlpha), () => ctx2.value);\n        } else {\n          const current = ctx2.value.toFormat(ctx2.format);\n          const valueAsNumber = Number.isNaN(value) ? current.getChannelValue(channel) : value;\n          color = current.withChannelValue(channel, valueAsNumber);\n        }\n        sync.inputs(ctx2, color);\n        set.value(ctx2, color);\n      },\n      incrementChannel(ctx2, evt) {\n        const color = ctx2.value.incrementChannel(evt.channel, evt.step);\n        set.value(ctx2, color);\n      },\n      decrementChannel(ctx2, evt) {\n        const color = ctx2.value.decrementChannel(evt.channel, evt.step);\n        set.value(ctx2, color);\n      },\n      incrementAreaXChannel(ctx2, evt) {\n        const {\n          xChannel\n        } = evt.channel;\n        const color = ctx2.areaValue.incrementChannel(xChannel, evt.step);\n        set.value(ctx2, color);\n      },\n      decrementAreaXChannel(ctx2, evt) {\n        const {\n          xChannel\n        } = evt.channel;\n        const color = ctx2.areaValue.decrementChannel(xChannel, evt.step);\n        set.value(ctx2, color);\n      },\n      incrementAreaYChannel(ctx2, evt) {\n        const {\n          yChannel\n        } = evt.channel;\n        const color = ctx2.areaValue.incrementChannel(yChannel, evt.step);\n        set.value(ctx2, color);\n      },\n      decrementAreaYChannel(ctx2, evt) {\n        const {\n          yChannel\n        } = evt.channel;\n        const color = ctx2.areaValue.decrementChannel(yChannel, evt.step);\n        set.value(ctx2, color);\n      },\n      setChannelToMax(ctx2, evt) {\n        const range = ctx2.value.getChannelRange(evt.channel);\n        const color = ctx2.value.withChannelValue(evt.channel, range.maxValue);\n        set.value(ctx2, color);\n      },\n      setChannelToMin(ctx2, evt) {\n        const range = ctx2.value.getChannelRange(evt.channel);\n        const color = ctx2.value.withChannelValue(evt.channel, range.minValue);\n        set.value(ctx2, color);\n      },\n      focusAreaThumb(ctx2) {\n        raf(() => {\n          dom.getAreaThumbEl(ctx2)?.focus({\n            preventScroll: true\n          });\n        });\n      },\n      focusChannelThumb(ctx2, evt) {\n        raf(() => {\n          dom.getChannelSliderThumbEl(ctx2, evt.channel)?.focus({\n            preventScroll: true\n          });\n        });\n      },\n      setInitialFocus(ctx2) {\n        raf(() => {\n          const element = getInitialFocus({\n            root: dom.getContentEl(ctx2),\n            getInitialEl: ctx2.initialFocusEl\n          });\n          element?.focus({\n            preventScroll: true\n          });\n        });\n      },\n      setReturnFocus(ctx2) {\n        raf(() => {\n          dom.getTriggerEl(ctx2)?.focus({\n            preventScroll: true\n          });\n        });\n      },\n      syncFormatSelectElement(ctx2) {\n        sync.formatSelect(ctx2);\n      },\n      invokeOnOpen(ctx2) {\n        ctx2.onOpenChange?.({\n          open: true\n        });\n      },\n      invokeOnClose(ctx2) {\n        ctx2.onOpenChange?.({\n          open: false\n        });\n      },\n      toggleVisibility(ctx2, evt, {\n        send\n      }) {\n        send({\n          type: ctx2.open ? \"CONTROLLED.OPEN\" : \"CONTROLLED.CLOSE\",\n          previousEvent: evt\n        });\n      }\n    },\n    compareFns: {\n      value: (a, b) => a.isEqual(b)\n    }\n  });\n}\nvar sync = {\n  // sync channel inputs\n  inputs(ctx, color) {\n    const channelInputs = dom.getChannelInputEls(ctx);\n    raf(() => {\n      channelInputs.forEach(inputEl => {\n        const channel = inputEl.dataset.channel;\n        dom.setValue(inputEl, getChannelValue(color || ctx.value, channel));\n      });\n    });\n  },\n  // sync format select\n  formatSelect(ctx) {\n    const selectEl = dom.getFormatSelectEl(ctx);\n    raf(() => {\n      dom.setValue(selectEl, ctx.format);\n    });\n  }\n};\nvar invoke = {\n  changeEnd(ctx) {\n    const value = ctx.value.toFormat(ctx.format);\n    ctx.onValueChangeEnd?.({\n      value,\n      valueAsString: ctx.valueAsString\n    });\n  },\n  change(ctx) {\n    const value = ctx.value.toFormat(ctx.format);\n    ctx.onValueChange?.({\n      value,\n      valueAsString: ctx.valueAsString\n    });\n    dispatchInputValueEvent(dom.getHiddenInputEl(ctx), {\n      value: ctx.valueAsString\n    });\n  },\n  formatChange(ctx) {\n    ctx.onFormatChange?.({\n      format: ctx.format\n    });\n  }\n};\nvar set = {\n  value(ctx, color) {\n    if (!color || ctx.value.isEqual(color)) return;\n    ctx.value = color;\n    invoke.change(ctx);\n  },\n  format(ctx, format) {\n    if (ctx.format === format) return;\n    ctx.format = format;\n    invoke.formatChange(ctx);\n  }\n};\nexport { anatomy, connect, machine, parse };","map":{"version":3,"names":["createAnatomy","normalizeColor","getColorAreaGradient","parseColor","getRelativePoint","isLeftClick","isModifierKey","getEventPoint","getEventStep","getEventKey","trackPointerMove","createScope","queryAll","dataAttr","query","visuallyHiddenStyle","raf","getInitialFocus","getPlacementStyles","getPlacement","createMachine","guards","trackDismissableElement","trackFormControl","dispatchInputValueEvent","disableTextSelection","compact","tryCatch","anatomy","parts","build","dom","getRootId","ctx","ids","root","id","getLabelId","label","getHiddenInputId","hiddenInput","getControlId","control","getTriggerId","trigger","getContentId","content","getPositionerId","positioner","getFormatSelectId","formatSelect","getAreaId","area","getAreaGradientId","areaGradient","getAreaThumbId","areaThumb","getChannelSliderTrackId","channel","channelSliderTrack","getChannelSliderThumbId","channelSliderThumb","getContentEl","getById","getAreaThumbEl","getChannelSliderThumbEl","getChannelInputEl","selector","getControlEl","getFormatSelectEl","getHiddenInputEl","getAreaEl","getAreaValueFromPoint","point","areaEl","percent","getTriggerEl","getPositionerEl","getChannelSliderTrackEl","getChannelSliderValueFromPoint","trackEl","getChannelInputEls","getChannelDisplayColor","color","getChannelValue","withChannelValue","Error","toString","isHSL","getFormat","toFormat","getChannelRange","minColor","maxColor","minValue","toHexInt","maxValue","pageSize","step","getSliderBackgroundDirection","orientation","dir","getSliderBackground","props","value","bgDirection","start","middle","end","connect","state","send","normalize","context","areaValue","valueAsString","disabled","isDisabled","interactive","isInteractive","dragging","hasTag","open","focused","getAreaChannels","channels","getChannels","xChannel","yChannel","currentPlacement","popperStyles","positioning","placement","getSwatchTriggerState","format","checked","isEqual","setOpen","nextOpen","type","setValue","value2","src","getChannelValueText","locale","formatChannelValue","setChannelValue","channelValue","setFormat","formatValue","alpha","setAlpha","alphaValue","getRootProps","element","attrs","readOnly","style","getLabelProps","htmlFor","onClick","event","preventDefault","inputEl","focus","preventScroll","getControlProps","getTriggerProps","button","onBlur","position","getPositionerProps","floating","getContentProps","hidden","getValueTextProps","valueText","getAreaProps","areaStyles","role","onPointerDown","touchAction","forcedColorAdjust","getAreaBackgroundProps","areaGradientStyles","areaBackground","getAreaThumbProps","xPercent","getChannelValuePercent","yPercent","xValue","yValue","tabIndex","left","top","transform","background","onFocus","onKeyDown","defaultPrevented","keyMap","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","PageUp","PageDown","Escape","event2","stopPropagation","exec","getTransparencyGridProps","size","transparencyGrid","width","height","backgroundColor","backgroundImage","backgroundSize","inset","zIndex","pointerEvents","getChannelSliderProps","channelSlider","getChannelSliderTrackProps","normalizedValue","getChannelSliderLabelProps","channelSliderLabel","thumbId","userSelect","WebkitUserSelect","getChannelSliderValueTextProps","channelSliderValueText","getChannelSliderThumbProps","channelRange","offset","placementStyles","Home","End","getChannelInputProps","isTextField","input","channelInput","spellCheck","autoComplete","defaultValue","min","max","onBeforeInput","currentTarget","match","select","valueAsNumber","key","appearance","WebkitAppearance","MozAppearance","getHiddenInputProps","name","required","getEyeDropperTriggerProps","eyeDropperTrigger","getSwatchGroupProps","swatchGroup","getSwatchTriggerProps","swatchState","swatchTrigger","getSwatchIndicatorProps","swatchIndicator","getSwatchProps","respectAlpha","swatch","getFormatTriggerProps","formatTrigger","getNextFormat","nextFormat","getFormatSelectProps","onChange","assertFormat","formats","formatRegex","RegExp","join","index","indexOf","test","parse","colorString","and","machine","userContext","initial","closeOnSelect","activeId","activeChannel","activeOrientation","fieldsetDisabled","restoreFocus","computed","isRtl","ctx2","startsWith","activities","watch","on","actions","states","idle","tags","target","OPEN","guard","INTERACT_OUTSIDE","CLOSE","exit","isOpenControlled","shouldRestoreFocus","trackPositioning","anchorEl","defer","onComplete","data","_evt","exclude","onInteractOutside","detail","focusable","contextmenu","onPointerDownOutside","onFocusOutside","onDismiss","initialContext","onFieldsetDisabledChange","onFormReset","evt","getDoc","onPointerMove","onPointerUp","doc","openEyeDropper","isSupported","getWin","win","picker","EyeDropper","then","sRGBHex","set","onValueChangeEnd","catch","setActiveChannel","clearActiveChannel","setAreaColorFromPoint","getChannelPercentValue","x","y","setChannelColorFromPoint","channelPercent","syncInputElements","sync","inputs","invokeOnChangeEnd","invoke","changeEnd","setChannelColorFromInput","currentAlpha","parseFloat","Number","isNaN","current","incrementChannel","decrementChannel","incrementAreaXChannel","decrementAreaXChannel","incrementAreaYChannel","decrementAreaYChannel","setChannelToMax","range","setChannelToMin","focusAreaThumb","focusChannelThumb","setInitialFocus","getInitialEl","initialFocusEl","setReturnFocus","syncFormatSelectElement","invokeOnOpen","onOpenChange","invokeOnClose","toggleVisibility","previousEvent","compareFns","a","b","channelInputs","forEach","dataset","selectEl","change","onValueChange","formatChange","onFormatChange"],"sources":["D:/assignment/e_commerce/ecommerce-product-page/node_modules/@zag-js/color-picker/dist/index.mjs"],"sourcesContent":["import { createAnatomy } from '@zag-js/anatomy';\nimport { normalizeColor, getColorAreaGradient, parseColor } from '@zag-js/color-utils';\nimport { getRelativePoint, isLeftClick, isModifierKey, getEventPoint, getEventStep, getEventKey, trackPointerMove } from '@zag-js/dom-event';\nimport { createScope, queryAll, dataAttr, query, visuallyHiddenStyle, raf, getInitialFocus } from '@zag-js/dom-query';\nimport { getPlacementStyles, getPlacement } from '@zag-js/popper';\nimport { createMachine, guards } from '@zag-js/core';\nimport { trackDismissableElement } from '@zag-js/dismissable';\nimport { trackFormControl, dispatchInputValueEvent } from '@zag-js/form-utils';\nimport { disableTextSelection } from '@zag-js/text-selection';\nimport { compact, tryCatch } from '@zag-js/utils';\n\n// src/color-picker.anatomy.ts\nvar anatomy = createAnatomy(\"color-picker\", [\n  \"root\",\n  \"label\",\n  \"control\",\n  \"trigger\",\n  \"positioner\",\n  \"content\",\n  \"area\",\n  \"areaThumb\",\n  \"valueText\",\n  \"areaBackground\",\n  \"channelSlider\",\n  \"channelSliderLabel\",\n  \"channelSliderTrack\",\n  \"channelSliderThumb\",\n  \"channelSliderValueText\",\n  \"channelInput\",\n  \"transparencyGrid\",\n  \"swatchGroup\",\n  \"swatchTrigger\",\n  \"swatchIndicator\",\n  \"swatch\",\n  \"eyeDropperTrigger\",\n  \"formatTrigger\",\n  \"formatSelect\"\n]);\nvar parts = anatomy.build();\nvar dom = createScope({\n  getRootId: (ctx) => ctx.ids?.root ?? `color-picker:${ctx.id}`,\n  getLabelId: (ctx) => ctx.ids?.label ?? `color-picker:${ctx.id}:label`,\n  getHiddenInputId: (ctx) => ctx.ids?.hiddenInput ?? `color-picker:${ctx.id}:hidden-input`,\n  getControlId: (ctx) => ctx.ids?.control ?? `color-picker:${ctx.id}:control`,\n  getTriggerId: (ctx) => ctx.ids?.trigger ?? `color-picker:${ctx.id}:trigger`,\n  getContentId: (ctx) => ctx.ids?.content ?? `color-picker:${ctx.id}:content`,\n  getPositionerId: (ctx) => ctx.ids?.positioner ?? `color-picker:${ctx.id}:positioner`,\n  getFormatSelectId: (ctx) => ctx.ids?.formatSelect ?? `color-picker:${ctx.id}:format-select`,\n  getAreaId: (ctx) => ctx.ids?.area ?? `color-picker:${ctx.id}:area`,\n  getAreaGradientId: (ctx) => ctx.ids?.areaGradient ?? `color-picker:${ctx.id}:area-gradient`,\n  getAreaThumbId: (ctx) => ctx.ids?.areaThumb ?? `color-picker:${ctx.id}:area-thumb`,\n  getChannelSliderTrackId: (ctx, channel) => ctx.ids?.channelSliderTrack?.(channel) ?? `color-picker:${ctx.id}:slider-track:${channel}`,\n  getChannelSliderThumbId: (ctx, channel) => ctx.ids?.channelSliderThumb?.(channel) ?? `color-picker:${ctx.id}:slider-thumb:${channel}`,\n  getContentEl: (ctx) => dom.getById(ctx, dom.getContentId(ctx)),\n  getAreaThumbEl: (ctx) => dom.getById(ctx, dom.getAreaThumbId(ctx)),\n  getChannelSliderThumbEl: (ctx, channel) => dom.getById(ctx, dom.getChannelSliderThumbId(ctx, channel)),\n  getChannelInputEl: (ctx, channel) => {\n    const selector = `input[data-channel=\"${channel}\"]`;\n    return [\n      ...queryAll(dom.getContentEl(ctx), selector),\n      ...queryAll(dom.getControlEl(ctx), selector)\n    ];\n  },\n  getFormatSelectEl: (ctx) => dom.getById(ctx, dom.getFormatSelectId(ctx)),\n  getHiddenInputEl: (ctx) => dom.getById(ctx, dom.getHiddenInputId(ctx)),\n  getAreaEl: (ctx) => dom.getById(ctx, dom.getAreaId(ctx)),\n  getAreaValueFromPoint(ctx, point) {\n    const areaEl = dom.getAreaEl(ctx);\n    if (!areaEl) return;\n    const { percent } = getRelativePoint(point, areaEl);\n    return percent;\n  },\n  getControlEl: (ctx) => dom.getById(ctx, dom.getControlId(ctx)),\n  getTriggerEl: (ctx) => dom.getById(ctx, dom.getTriggerId(ctx)),\n  getPositionerEl: (ctx) => dom.getById(ctx, dom.getPositionerId(ctx)),\n  getChannelSliderTrackEl: (ctx, channel) => {\n    return dom.getById(ctx, dom.getChannelSliderTrackId(ctx, channel));\n  },\n  getChannelSliderValueFromPoint(ctx, point, channel) {\n    const trackEl = dom.getChannelSliderTrackEl(ctx, channel);\n    if (!trackEl) return;\n    const { percent } = getRelativePoint(point, trackEl);\n    return percent;\n  },\n  getChannelInputEls: (ctx) => {\n    return [\n      ...queryAll(dom.getContentEl(ctx), \"input[data-channel]\"),\n      ...queryAll(dom.getControlEl(ctx), \"input[data-channel]\")\n    ];\n  }\n});\nfunction getChannelDisplayColor(color, channel) {\n  switch (channel) {\n    case \"hue\":\n      return parseColor(`hsl(${color.getChannelValue(\"hue\")}, 100%, 50%)`);\n    case \"lightness\":\n    case \"brightness\":\n    case \"saturation\":\n    case \"red\":\n    case \"green\":\n    case \"blue\":\n      return color.withChannelValue(\"alpha\", 1);\n    case \"alpha\": {\n      return color;\n    }\n    default:\n      throw new Error(\"Unknown color channel: \" + channel);\n  }\n}\nfunction getChannelValue(color, channel) {\n  if (channel == null) return \"\";\n  if (channel === \"hex\") {\n    return color.toString(\"hex\");\n  }\n  if (channel === \"css\") {\n    return color.toString(\"css\");\n  }\n  if (channel in color) {\n    return color.getChannelValue(channel).toString();\n  }\n  const isHSL = color.getFormat() === \"hsla\";\n  switch (channel) {\n    case \"hue\":\n      return isHSL ? color.toFormat(\"hsla\").getChannelValue(\"hue\").toString() : color.toFormat(\"hsba\").getChannelValue(\"hue\").toString();\n    case \"saturation\":\n      return isHSL ? color.toFormat(\"hsla\").getChannelValue(\"saturation\").toString() : color.toFormat(\"hsba\").getChannelValue(\"saturation\").toString();\n    case \"lightness\":\n      return color.toFormat(\"hsla\").getChannelValue(\"lightness\").toString();\n    case \"brightness\":\n      return color.toFormat(\"hsba\").getChannelValue(\"brightness\").toString();\n    case \"red\":\n    case \"green\":\n    case \"blue\":\n      return color.toFormat(\"rgba\").getChannelValue(channel).toString();\n    default:\n      return color.getChannelValue(channel).toString();\n  }\n}\nfunction getChannelRange(color, channel) {\n  switch (channel) {\n    case \"hex\":\n      const minColor = parseColor(\"#000000\");\n      const maxColor = parseColor(\"#FFFFFF\");\n      return {\n        minValue: minColor.toHexInt(),\n        maxValue: maxColor.toHexInt(),\n        pageSize: 10,\n        step: 1\n      };\n    case \"css\":\n      return void 0;\n    case \"hue\":\n    case \"saturation\":\n    case \"lightness\":\n      return color.toFormat(\"hsla\").getChannelRange(channel);\n    case \"brightness\":\n      return color.toFormat(\"hsba\").getChannelRange(channel);\n    case \"red\":\n    case \"green\":\n    case \"blue\":\n      return color.toFormat(\"rgba\").getChannelRange(channel);\n    default:\n      return color.getChannelRange(channel);\n  }\n}\n\n// src/utils/get-slider-background.ts\nfunction getSliderBackgroundDirection(orientation, dir) {\n  if (orientation === \"vertical\") {\n    return \"top\";\n  } else if (dir === \"ltr\") {\n    return \"right\";\n  } else {\n    return \"left\";\n  }\n}\nvar getSliderBackground = (props) => {\n  const { channel, value, dir } = props;\n  const bgDirection = getSliderBackgroundDirection(props.orientation, dir);\n  const { minValue, maxValue } = value.getChannelRange(channel);\n  switch (channel) {\n    case \"hue\":\n      return `linear-gradient(to ${bgDirection}, rgb(255, 0, 0) 0%, rgb(255, 255, 0) 17%, rgb(0, 255, 0) 33%, rgb(0, 255, 255) 50%, rgb(0, 0, 255) 67%, rgb(255, 0, 255) 83%, rgb(255, 0, 0) 100%)`;\n    case \"lightness\": {\n      let start = value.withChannelValue(channel, minValue).toString(\"css\");\n      let middle = value.withChannelValue(channel, (maxValue - minValue) / 2).toString(\"css\");\n      let end = value.withChannelValue(channel, maxValue).toString(\"css\");\n      return `linear-gradient(to ${bgDirection}, ${start}, ${middle}, ${end})`;\n    }\n    case \"saturation\":\n    case \"brightness\":\n    case \"red\":\n    case \"green\":\n    case \"blue\":\n    case \"alpha\": {\n      let start = value.withChannelValue(channel, minValue).toString(\"css\");\n      let end = value.withChannelValue(channel, maxValue).toString(\"css\");\n      return `linear-gradient(to ${bgDirection}, ${start}, ${end})`;\n    }\n    default:\n      throw new Error(\"Unknown color channel: \" + channel);\n  }\n};\n\n// src/color-picker.connect.ts\nfunction connect(state, send, normalize) {\n  const value = state.context.value;\n  const areaValue = state.context.areaValue;\n  const valueAsString = state.context.valueAsString;\n  const disabled = state.context.isDisabled;\n  const interactive = state.context.isInteractive;\n  const dragging = state.hasTag(\"dragging\");\n  const open = state.hasTag(\"open\");\n  const focused = state.hasTag(\"focused\");\n  const getAreaChannels = (props) => {\n    const channels = areaValue.getChannels();\n    return {\n      xChannel: props.xChannel ?? channels[1],\n      yChannel: props.yChannel ?? channels[2]\n    };\n  };\n  const currentPlacement = state.context.currentPlacement;\n  const popperStyles = getPlacementStyles({\n    ...state.context.positioning,\n    placement: currentPlacement\n  });\n  function getSwatchTriggerState(props) {\n    const color = normalizeColor(props.value).toFormat(state.context.format);\n    return {\n      value: color,\n      valueAsString: color.toString(\"hex\"),\n      checked: color.isEqual(value),\n      disabled: props.disabled || !interactive\n    };\n  }\n  return {\n    dragging,\n    open,\n    valueAsString,\n    value,\n    setOpen(nextOpen) {\n      if (nextOpen === open) return;\n      send({ type: nextOpen ? \"OPEN\" : \"CLOSE\" });\n    },\n    setValue(value2) {\n      send({ type: \"VALUE.SET\", value: normalizeColor(value2), src: \"set-color\" });\n    },\n    getChannelValue(channel) {\n      return getChannelValue(value, channel);\n    },\n    getChannelValueText(channel, locale) {\n      return value.formatChannelValue(channel, locale);\n    },\n    setChannelValue(channel, channelValue) {\n      const color = value.withChannelValue(channel, channelValue);\n      send({ type: \"VALUE.SET\", value: color, src: \"set-channel\" });\n    },\n    format: state.context.format,\n    setFormat(format) {\n      const formatValue = value.toFormat(format);\n      send({ type: \"VALUE.SET\", value: formatValue, src: \"set-format\" });\n    },\n    alpha: value.getChannelValue(\"alpha\"),\n    setAlpha(alphaValue) {\n      const color = value.withChannelValue(\"alpha\", alphaValue);\n      send({ type: \"VALUE.SET\", value: color, src: \"set-alpha\" });\n    },\n    getRootProps() {\n      return normalize.element({\n        ...parts.root.attrs,\n        dir: state.context.dir,\n        id: dom.getRootId(state.context),\n        \"data-disabled\": dataAttr(disabled),\n        \"data-readonly\": dataAttr(state.context.readOnly),\n        style: {\n          \"--value\": value.toString(\"css\")\n        }\n      });\n    },\n    getLabelProps() {\n      return normalize.element({\n        ...parts.label.attrs,\n        dir: state.context.dir,\n        id: dom.getLabelId(state.context),\n        htmlFor: dom.getHiddenInputId(state.context),\n        \"data-disabled\": dataAttr(disabled),\n        \"data-readonly\": dataAttr(state.context.readOnly),\n        \"data-focus\": dataAttr(focused),\n        onClick(event) {\n          event.preventDefault();\n          const inputEl = query(dom.getControlEl(state.context), \"[data-channel=hex]\");\n          inputEl?.focus({ preventScroll: true });\n        }\n      });\n    },\n    getControlProps() {\n      return normalize.element({\n        ...parts.control.attrs,\n        id: dom.getControlId(state.context),\n        dir: state.context.dir,\n        \"data-disabled\": dataAttr(disabled),\n        \"data-readonly\": dataAttr(state.context.readOnly),\n        \"data-state\": open ? \"open\" : \"closed\",\n        \"data-focus\": dataAttr(focused)\n      });\n    },\n    getTriggerProps() {\n      return normalize.button({\n        ...parts.trigger.attrs,\n        id: dom.getTriggerId(state.context),\n        dir: state.context.dir,\n        disabled,\n        \"aria-label\": `select color. current color is ${valueAsString}`,\n        \"aria-controls\": dom.getContentId(state.context),\n        \"aria-labelledby\": dom.getLabelId(state.context),\n        \"data-disabled\": dataAttr(disabled),\n        \"data-readonly\": dataAttr(state.context.readOnly),\n        \"data-placement\": currentPlacement,\n        \"aria-expanded\": dataAttr(open),\n        \"data-state\": open ? \"open\" : \"closed\",\n        \"data-focus\": dataAttr(focused),\n        type: \"button\",\n        onClick() {\n          if (!interactive) return;\n          send({ type: \"TRIGGER.CLICK\" });\n        },\n        onBlur() {\n          if (!interactive) return;\n          send({ type: \"TRIGGER.BLUR\" });\n        },\n        style: {\n          position: \"relative\"\n        }\n      });\n    },\n    getPositionerProps() {\n      return normalize.element({\n        ...parts.positioner.attrs,\n        id: dom.getPositionerId(state.context),\n        dir: state.context.dir,\n        style: popperStyles.floating\n      });\n    },\n    getContentProps() {\n      return normalize.element({\n        ...parts.content.attrs,\n        id: dom.getContentId(state.context),\n        dir: state.context.dir,\n        \"data-placement\": currentPlacement,\n        \"data-state\": open ? \"open\" : \"closed\",\n        hidden: !open\n      });\n    },\n    getValueTextProps() {\n      return normalize.element({\n        ...parts.valueText.attrs,\n        dir: state.context.dir,\n        \"data-disabled\": dataAttr(disabled),\n        \"data-focus\": dataAttr(focused)\n      });\n    },\n    getAreaProps(props = {}) {\n      const { xChannel, yChannel } = getAreaChannels(props);\n      const { areaStyles } = getColorAreaGradient(areaValue, {\n        xChannel,\n        yChannel,\n        dir: state.context.dir\n      });\n      return normalize.element({\n        ...parts.area.attrs,\n        id: dom.getAreaId(state.context),\n        role: \"group\",\n        onPointerDown(event) {\n          if (!interactive) return;\n          if (!isLeftClick(event)) return;\n          if (isModifierKey(event)) return;\n          const point = getEventPoint(event);\n          const channel = { xChannel, yChannel };\n          send({ type: \"AREA.POINTER_DOWN\", point, channel, id: \"area\" });\n          event.preventDefault();\n        },\n        style: {\n          position: \"relative\",\n          touchAction: \"none\",\n          forcedColorAdjust: \"none\",\n          ...areaStyles\n        }\n      });\n    },\n    getAreaBackgroundProps(props = {}) {\n      const { xChannel, yChannel } = getAreaChannels(props);\n      const { areaGradientStyles } = getColorAreaGradient(areaValue, {\n        xChannel,\n        yChannel,\n        dir: state.context.dir\n      });\n      return normalize.element({\n        ...parts.areaBackground.attrs,\n        id: dom.getAreaGradientId(state.context),\n        style: {\n          position: \"relative\",\n          touchAction: \"none\",\n          forcedColorAdjust: \"none\",\n          ...areaGradientStyles\n        }\n      });\n    },\n    getAreaThumbProps(props = {}) {\n      const { xChannel, yChannel } = getAreaChannels(props);\n      const channel = { xChannel, yChannel };\n      const xPercent = areaValue.getChannelValuePercent(xChannel);\n      const yPercent = 1 - areaValue.getChannelValuePercent(yChannel);\n      const xValue = areaValue.getChannelValue(xChannel);\n      const yValue = areaValue.getChannelValue(yChannel);\n      return normalize.element({\n        ...parts.areaThumb.attrs,\n        id: dom.getAreaThumbId(state.context),\n        dir: state.context.dir,\n        tabIndex: disabled ? void 0 : 0,\n        \"data-disabled\": dataAttr(disabled),\n        role: \"slider\",\n        \"aria-valuemin\": 0,\n        \"aria-valuemax\": 100,\n        \"aria-valuenow\": xValue,\n        \"aria-label\": `${xChannel} and ${yChannel}`,\n        \"aria-roledescription\": \"2d slider\",\n        \"aria-valuetext\": `${xChannel} ${xValue}, ${yChannel} ${yValue}`,\n        style: {\n          position: \"absolute\",\n          left: `${xPercent * 100}%`,\n          top: `${yPercent * 100}%`,\n          transform: \"translate(-50%, -50%)\",\n          touchAction: \"none\",\n          forcedColorAdjust: \"none\",\n          background: areaValue.withChannelValue(\"alpha\", 1).toString(\"css\")\n        },\n        onFocus() {\n          if (!interactive) return;\n          send({ type: \"AREA.FOCUS\", id: \"area\", channel });\n        },\n        onKeyDown(event) {\n          if (event.defaultPrevented) return;\n          if (!interactive) return;\n          const step = getEventStep(event);\n          const keyMap = {\n            ArrowUp() {\n              send({ type: \"AREA.ARROW_UP\", channel, step });\n            },\n            ArrowDown() {\n              send({ type: \"AREA.ARROW_DOWN\", channel, step });\n            },\n            ArrowLeft() {\n              send({ type: \"AREA.ARROW_LEFT\", channel, step });\n            },\n            ArrowRight() {\n              send({ type: \"AREA.ARROW_RIGHT\", channel, step });\n            },\n            PageUp() {\n              send({ type: \"AREA.PAGE_UP\", channel, step });\n            },\n            PageDown() {\n              send({ type: \"AREA.PAGE_DOWN\", channel, step });\n            },\n            Escape(event2) {\n              event2.stopPropagation();\n            }\n          };\n          const exec = keyMap[getEventKey(event, state.context)];\n          if (exec) {\n            exec(event);\n            event.preventDefault();\n          }\n        }\n      });\n    },\n    getTransparencyGridProps(props = {}) {\n      const { size = \"12px\" } = props;\n      return normalize.element({\n        ...parts.transparencyGrid.attrs,\n        style: {\n          \"--size\": size,\n          width: \"100%\",\n          height: \"100%\",\n          position: \"absolute\",\n          backgroundColor: \"#fff\",\n          backgroundImage: \"conic-gradient(#eeeeee 0 25%, transparent 0 50%, #eeeeee 0 75%, transparent 0)\",\n          backgroundSize: \"var(--size) var(--size)\",\n          inset: \"0px\",\n          zIndex: \"auto\",\n          pointerEvents: \"none\"\n        }\n      });\n    },\n    getChannelSliderProps(props) {\n      const { orientation = \"horizontal\", channel, format } = props;\n      return normalize.element({\n        ...parts.channelSlider.attrs,\n        \"data-channel\": channel,\n        \"data-orientation\": orientation,\n        role: \"presentation\",\n        onPointerDown(event) {\n          if (!interactive) return;\n          if (!isLeftClick(event)) return;\n          if (isModifierKey(event)) return;\n          const point = getEventPoint(event);\n          send({ type: \"CHANNEL_SLIDER.POINTER_DOWN\", channel, format, point, id: channel, orientation });\n          event.preventDefault();\n        },\n        style: {\n          position: \"relative\",\n          touchAction: \"none\"\n        }\n      });\n    },\n    getChannelSliderTrackProps(props) {\n      const { orientation = \"horizontal\", channel, format } = props;\n      const normalizedValue = format ? value.toFormat(format) : areaValue;\n      return normalize.element({\n        ...parts.channelSliderTrack.attrs,\n        id: dom.getChannelSliderTrackId(state.context, channel),\n        role: \"group\",\n        \"data-channel\": channel,\n        \"data-orientation\": orientation,\n        style: {\n          position: \"relative\",\n          forcedColorAdjust: \"none\",\n          backgroundImage: getSliderBackground({\n            orientation,\n            channel,\n            dir: state.context.dir,\n            value: normalizedValue\n          })\n        }\n      });\n    },\n    getChannelSliderLabelProps(props) {\n      const { channel } = props;\n      return normalize.element({\n        ...parts.channelSliderLabel.attrs,\n        \"data-channel\": channel,\n        onClick(event) {\n          if (!interactive) return;\n          event.preventDefault();\n          const thumbId = dom.getChannelSliderThumbId(state.context, channel);\n          dom.getById(state.context, thumbId)?.focus({ preventScroll: true });\n        },\n        style: {\n          userSelect: \"none\",\n          WebkitUserSelect: \"none\"\n        }\n      });\n    },\n    getChannelSliderValueTextProps(props) {\n      return normalize.element({\n        ...parts.channelSliderValueText.attrs,\n        \"data-channel\": props.channel\n      });\n    },\n    getChannelSliderThumbProps(props) {\n      const { orientation = \"horizontal\", channel, format } = props;\n      const normalizedValue = format ? value.toFormat(format) : areaValue;\n      const channelRange = normalizedValue.getChannelRange(channel);\n      const channelValue = normalizedValue.getChannelValue(channel);\n      const offset = (channelValue - channelRange.minValue) / (channelRange.maxValue - channelRange.minValue);\n      const placementStyles = orientation === \"horizontal\" ? { left: `${offset * 100}%`, top: \"50%\" } : { top: `${offset * 100}%`, left: \"50%\" };\n      return normalize.element({\n        ...parts.channelSliderThumb.attrs,\n        id: dom.getChannelSliderThumbId(state.context, channel),\n        role: \"slider\",\n        \"aria-label\": channel,\n        tabIndex: disabled ? void 0 : 0,\n        \"data-channel\": channel,\n        \"data-disabled\": dataAttr(disabled),\n        \"data-orientation\": orientation,\n        \"aria-disabled\": dataAttr(disabled),\n        \"aria-orientation\": orientation,\n        \"aria-valuemax\": channelRange.maxValue,\n        \"aria-valuemin\": channelRange.minValue,\n        \"aria-valuenow\": channelValue,\n        \"aria-valuetext\": `${channel} ${channelValue}`,\n        style: {\n          forcedColorAdjust: \"none\",\n          position: \"absolute\",\n          background: getChannelDisplayColor(areaValue, channel).toString(\"css\"),\n          ...placementStyles\n        },\n        onFocus() {\n          if (!interactive) return;\n          send({ type: \"CHANNEL_SLIDER.FOCUS\", channel });\n        },\n        onKeyDown(event) {\n          if (event.defaultPrevented) return;\n          if (!interactive) return;\n          const step = getEventStep(event) * channelRange.step;\n          const keyMap = {\n            ArrowUp() {\n              send({ type: \"CHANNEL_SLIDER.ARROW_UP\", channel, step });\n            },\n            ArrowDown() {\n              send({ type: \"CHANNEL_SLIDER.ARROW_DOWN\", channel, step });\n            },\n            ArrowLeft() {\n              send({ type: \"CHANNEL_SLIDER.ARROW_LEFT\", channel, step });\n            },\n            ArrowRight() {\n              send({ type: \"CHANNEL_SLIDER.ARROW_RIGHT\", channel, step });\n            },\n            PageUp() {\n              send({ type: \"CHANNEL_SLIDER.PAGE_UP\", channel });\n            },\n            PageDown() {\n              send({ type: \"CHANNEL_SLIDER.PAGE_DOWN\", channel });\n            },\n            Home() {\n              send({ type: \"CHANNEL_SLIDER.HOME\", channel });\n            },\n            End() {\n              send({ type: \"CHANNEL_SLIDER.END\", channel });\n            },\n            Escape(event2) {\n              event2.stopPropagation();\n            }\n          };\n          const exec = keyMap[getEventKey(event, state.context)];\n          if (exec) {\n            exec(event);\n            event.preventDefault();\n          }\n        }\n      });\n    },\n    getChannelInputProps(props) {\n      const { channel } = props;\n      const isTextField = channel === \"hex\" || channel === \"css\";\n      const channelRange = getChannelRange(value, channel);\n      return normalize.input({\n        ...parts.channelInput.attrs,\n        dir: state.context.dir,\n        type: isTextField ? \"text\" : \"number\",\n        \"data-channel\": channel,\n        \"aria-label\": channel,\n        spellCheck: false,\n        autoComplete: \"off\",\n        disabled,\n        \"data-disabled\": dataAttr(disabled),\n        readOnly: state.context.readOnly,\n        defaultValue: getChannelValue(value, channel),\n        min: channelRange?.minValue,\n        max: channelRange?.maxValue,\n        step: channelRange?.step,\n        onBeforeInput(event) {\n          if (isTextField || !interactive) return;\n          const value2 = event.currentTarget.value;\n          if (value2.match(/[^0-9.]/g)) {\n            event.preventDefault();\n          }\n        },\n        onFocus(event) {\n          if (!interactive) return;\n          send({ type: \"CHANNEL_INPUT.FOCUS\", channel });\n          event.currentTarget.select();\n        },\n        onBlur(event) {\n          if (!interactive) return;\n          const value2 = isTextField ? event.currentTarget.value : event.currentTarget.valueAsNumber;\n          send({ type: \"CHANNEL_INPUT.BLUR\", channel, value: value2, isTextField });\n        },\n        onKeyDown(event) {\n          if (event.defaultPrevented) return;\n          if (!interactive) return;\n          if (event.key === \"Enter\") {\n            const value2 = isTextField ? event.currentTarget.value : event.currentTarget.valueAsNumber;\n            send({ type: \"CHANNEL_INPUT.CHANGE\", channel, value: value2, isTextField });\n            event.preventDefault();\n          }\n        },\n        style: {\n          appearance: \"none\",\n          WebkitAppearance: \"none\",\n          MozAppearance: \"textfield\"\n        }\n      });\n    },\n    getHiddenInputProps() {\n      return normalize.input({\n        type: \"text\",\n        disabled,\n        name: state.context.name,\n        readOnly: state.context.readOnly,\n        required: state.context.required,\n        id: dom.getHiddenInputId(state.context),\n        style: visuallyHiddenStyle,\n        defaultValue: valueAsString\n      });\n    },\n    getEyeDropperTriggerProps() {\n      return normalize.button({\n        ...parts.eyeDropperTrigger.attrs,\n        type: \"button\",\n        dir: state.context.dir,\n        disabled,\n        \"data-disabled\": dataAttr(disabled),\n        \"aria-label\": \"Pick a color from the screen\",\n        onClick() {\n          if (!interactive) return;\n          send(\"EYEDROPPER.CLICK\");\n        }\n      });\n    },\n    getSwatchGroupProps() {\n      return normalize.element({\n        ...parts.swatchGroup.attrs,\n        role: \"group\"\n      });\n    },\n    getSwatchTriggerState,\n    getSwatchTriggerProps(props) {\n      const swatchState = getSwatchTriggerState(props);\n      return normalize.button({\n        ...parts.swatchTrigger.attrs,\n        disabled: swatchState.disabled,\n        dir: state.context.dir,\n        type: \"button\",\n        \"aria-label\": `select ${swatchState.valueAsString} as the color`,\n        \"data-state\": swatchState.checked ? \"checked\" : \"unchecked\",\n        \"data-value\": swatchState.valueAsString,\n        \"data-disabled\": dataAttr(swatchState.disabled),\n        onClick() {\n          if (swatchState.disabled) return;\n          send({ type: \"SWATCH_TRIGGER.CLICK\", value: swatchState.value });\n        },\n        style: {\n          position: \"relative\"\n        }\n      });\n    },\n    getSwatchIndicatorProps(props) {\n      const swatchState = getSwatchTriggerState(props);\n      return normalize.element({\n        ...parts.swatchIndicator.attrs,\n        dir: state.context.dir,\n        hidden: !swatchState.checked\n      });\n    },\n    getSwatchProps(props) {\n      const { respectAlpha = true } = props;\n      const swatchState = getSwatchTriggerState(props);\n      return normalize.element({\n        ...parts.swatch.attrs,\n        dir: state.context.dir,\n        \"data-state\": swatchState.checked ? \"checked\" : \"unchecked\",\n        \"data-value\": swatchState.valueAsString,\n        style: {\n          position: \"relative\",\n          background: swatchState.value.toString(respectAlpha ? \"css\" : \"hex\")\n        }\n      });\n    },\n    getFormatTriggerProps() {\n      return normalize.button({\n        ...parts.formatTrigger.attrs,\n        dir: state.context.dir,\n        type: \"button\",\n        \"aria-label\": `change color format to ${getNextFormat(state.context.format)}`,\n        onClick(event) {\n          if (event.currentTarget.disabled) return;\n          const nextFormat = getNextFormat(state.context.format);\n          send({ type: \"FORMAT.SET\", format: nextFormat, src: \"format-trigger\" });\n        }\n      });\n    },\n    getFormatSelectProps() {\n      return normalize.select({\n        ...parts.formatSelect.attrs,\n        \"aria-label\": \"change color format\",\n        dir: state.context.dir,\n        defaultValue: state.context.format,\n        disabled,\n        onChange(event) {\n          const format = assertFormat(event.currentTarget.value);\n          send({ type: \"FORMAT.SET\", format, src: \"format-select\" });\n        }\n      });\n    }\n  };\n}\nvar formats = [\"hsba\", \"hsla\", \"rgba\"];\nvar formatRegex = new RegExp(`^(${formats.join(\"|\")})$`);\nfunction getNextFormat(format) {\n  const index = formats.indexOf(format);\n  return formats[index + 1] ?? formats[0];\n}\nfunction assertFormat(format) {\n  if (formatRegex.test(format)) return format;\n  throw new Error(`Unsupported color format: ${format}`);\n}\nvar parse = (colorString) => {\n  return parseColor(colorString);\n};\n\n// src/color-picker.machine.ts\nvar { and } = guards;\nfunction machine(userContext) {\n  const ctx = compact(userContext);\n  return createMachine(\n    {\n      id: \"color-picker\",\n      initial: ctx.open ? \"open\" : \"idle\",\n      context: {\n        dir: \"ltr\",\n        value: parse(\"#000000\"),\n        format: \"rgba\",\n        disabled: false,\n        closeOnSelect: false,\n        ...ctx,\n        activeId: null,\n        activeChannel: null,\n        activeOrientation: null,\n        fieldsetDisabled: false,\n        restoreFocus: true,\n        positioning: {\n          ...ctx.positioning,\n          placement: \"bottom\"\n        }\n      },\n      computed: {\n        isRtl: (ctx2) => ctx2.dir === \"rtl\",\n        isDisabled: (ctx2) => !!ctx2.disabled || ctx2.fieldsetDisabled,\n        isInteractive: (ctx2) => !(ctx2.isDisabled || ctx2.readOnly),\n        valueAsString: (ctx2) => ctx2.value.toString(ctx2.format),\n        areaValue: (ctx2) => {\n          const format = ctx2.format.startsWith(\"hsl\") ? \"hsla\" : \"hsba\";\n          return ctx2.value.toFormat(format);\n        }\n      },\n      activities: [\"trackFormControl\"],\n      watch: {\n        value: [\"syncInputElements\"],\n        format: [\"syncFormatSelectElement\"],\n        open: [\"toggleVisibility\"]\n      },\n      on: {\n        \"VALUE.SET\": {\n          actions: [\"setValue\"]\n        },\n        \"FORMAT.SET\": {\n          actions: [\"setFormat\"]\n        },\n        \"CHANNEL_INPUT.CHANGE\": {\n          actions: [\"setChannelColorFromInput\"]\n        },\n        \"EYEDROPPER.CLICK\": {\n          actions: [\"openEyeDropper\"]\n        }\n      },\n      states: {\n        idle: {\n          tags: [\"closed\"],\n          on: {\n            \"CONTROLLED.OPEN\": {\n              target: \"open\",\n              actions: [\"setInitialFocus\"]\n            },\n            OPEN: [\n              {\n                guard: \"isOpenControlled\",\n                actions: [\"invokeOnOpen\"]\n              },\n              {\n                target: \"open\",\n                actions: [\"invokeOnOpen\", \"setInitialFocus\"]\n              }\n            ],\n            \"TRIGGER.CLICK\": [\n              {\n                guard: \"isOpenControlled\",\n                actions: [\"invokeOnOpen\"]\n              },\n              {\n                target: \"open\",\n                actions: [\"invokeOnOpen\", \"setInitialFocus\"]\n              }\n            ],\n            \"CHANNEL_INPUT.FOCUS\": {\n              target: \"focused\",\n              actions: [\"setActiveChannel\"]\n            }\n          }\n        },\n        focused: {\n          tags: [\"closed\", \"focused\"],\n          on: {\n            \"CONTROLLED.OPEN\": {\n              target: \"open\",\n              actions: [\"setInitialFocus\"]\n            },\n            OPEN: [\n              {\n                guard: \"isOpenControlled\",\n                actions: [\"invokeOnOpen\"]\n              },\n              {\n                target: \"open\",\n                actions: [\"invokeOnOpen\", \"setInitialFocus\"]\n              }\n            ],\n            \"TRIGGER.CLICK\": [\n              {\n                guard: \"isOpenControlled\",\n                actions: [\"invokeOnOpen\"]\n              },\n              {\n                target: \"open\",\n                actions: [\"invokeOnOpen\", \"setInitialFocus\"]\n              }\n            ],\n            \"CHANNEL_INPUT.FOCUS\": {\n              actions: [\"setActiveChannel\"]\n            },\n            \"CHANNEL_INPUT.BLUR\": {\n              target: \"idle\",\n              actions: [\"setChannelColorFromInput\"]\n            },\n            \"TRIGGER.BLUR\": {\n              target: \"idle\"\n            }\n          }\n        },\n        open: {\n          tags: [\"open\"],\n          activities: [\"trackPositioning\", \"trackDismissableElement\"],\n          on: {\n            \"CONTROLLED.CLOSE\": [\n              {\n                guard: \"shouldRestoreFocus\",\n                target: \"focused\",\n                actions: [\"setReturnFocus\"]\n              },\n              {\n                target: \"idle\"\n              }\n            ],\n            \"TRIGGER.CLICK\": [\n              {\n                guard: \"isOpenControlled\",\n                actions: [\"invokeOnClose\"]\n              },\n              {\n                target: \"idle\",\n                actions: [\"invokeOnClose\"]\n              }\n            ],\n            \"AREA.POINTER_DOWN\": {\n              target: \"open:dragging\",\n              actions: [\"setActiveChannel\", \"setAreaColorFromPoint\", \"focusAreaThumb\"]\n            },\n            \"AREA.FOCUS\": {\n              actions: [\"setActiveChannel\"]\n            },\n            \"CHANNEL_SLIDER.POINTER_DOWN\": {\n              target: \"open:dragging\",\n              actions: [\"setActiveChannel\", \"setChannelColorFromPoint\", \"focusChannelThumb\"]\n            },\n            \"CHANNEL_SLIDER.FOCUS\": {\n              actions: [\"setActiveChannel\"]\n            },\n            \"AREA.ARROW_LEFT\": {\n              actions: [\"decrementAreaXChannel\"]\n            },\n            \"AREA.ARROW_RIGHT\": {\n              actions: [\"incrementAreaXChannel\"]\n            },\n            \"AREA.ARROW_UP\": {\n              actions: [\"incrementAreaYChannel\"]\n            },\n            \"AREA.ARROW_DOWN\": {\n              actions: [\"decrementAreaYChannel\"]\n            },\n            \"AREA.PAGE_UP\": {\n              actions: [\"incrementAreaXChannel\"]\n            },\n            \"AREA.PAGE_DOWN\": {\n              actions: [\"decrementAreaXChannel\"]\n            },\n            \"CHANNEL_SLIDER.ARROW_LEFT\": {\n              actions: [\"decrementChannel\"]\n            },\n            \"CHANNEL_SLIDER.ARROW_RIGHT\": {\n              actions: [\"incrementChannel\"]\n            },\n            \"CHANNEL_SLIDER.ARROW_UP\": {\n              actions: [\"incrementChannel\"]\n            },\n            \"CHANNEL_SLIDER.ARROW_DOWN\": {\n              actions: [\"decrementChannel\"]\n            },\n            \"CHANNEL_SLIDER.PAGE_UP\": {\n              actions: [\"incrementChannel\"]\n            },\n            \"CHANNEL_SLIDER.PAGE_DOWN\": {\n              actions: [\"decrementChannel\"]\n            },\n            \"CHANNEL_SLIDER.HOME\": {\n              actions: [\"setChannelToMin\"]\n            },\n            \"CHANNEL_SLIDER.END\": {\n              actions: [\"setChannelToMax\"]\n            },\n            \"CHANNEL_INPUT.BLUR\": {\n              actions: [\"setChannelColorFromInput\"]\n            },\n            INTERACT_OUTSIDE: [\n              {\n                guard: \"isOpenControlled\",\n                actions: [\"invokeOnClose\"]\n              },\n              {\n                guard: \"shouldRestoreFocus\",\n                target: \"focused\",\n                actions: [\"invokeOnClose\", \"setReturnFocus\"]\n              },\n              {\n                target: \"idle\",\n                actions: [\"invokeOnClose\"]\n              }\n            ],\n            CLOSE: [\n              {\n                guard: \"isOpenControlled\",\n                actions: [\"invokeOnClose\"]\n              },\n              {\n                target: \"idle\",\n                actions: [\"invokeOnClose\"]\n              }\n            ],\n            \"SWATCH_TRIGGER.CLICK\": [\n              {\n                guard: and(\"isOpenControlled\", \"closeOnSelect\"),\n                actions: [\"setValue\", \"invokeOnClose\"]\n              },\n              {\n                guard: \"closeOnSelect\",\n                target: \"focused\",\n                actions: [\"setValue\", \"invokeOnClose\", \"setReturnFocus\"]\n              },\n              {\n                actions: [\"setValue\"]\n              }\n            ]\n          }\n        },\n        \"open:dragging\": {\n          tags: [\"open\"],\n          exit: [\"clearActiveChannel\"],\n          activities: [\"trackPointerMove\", \"disableTextSelection\", \"trackPositioning\", \"trackDismissableElement\"],\n          on: {\n            \"CONTROLLED.CLOSE\": [\n              {\n                guard: \"shouldRestoreFocus\",\n                target: \"focused\",\n                actions: [\"setReturnFocus\"]\n              },\n              {\n                target: \"idle\"\n              }\n            ],\n            \"AREA.POINTER_MOVE\": {\n              actions: [\"setAreaColorFromPoint\", \"focusAreaThumb\"]\n            },\n            \"AREA.POINTER_UP\": {\n              target: \"open\",\n              actions: [\"invokeOnChangeEnd\"]\n            },\n            \"CHANNEL_SLIDER.POINTER_MOVE\": {\n              actions: [\"setChannelColorFromPoint\", \"focusChannelThumb\"]\n            },\n            \"CHANNEL_SLIDER.POINTER_UP\": {\n              target: \"open\",\n              actions: [\"invokeOnChangeEnd\"]\n            },\n            INTERACT_OUTSIDE: [\n              {\n                guard: \"isOpenControlled\",\n                actions: [\"invokeOnClose\"]\n              },\n              {\n                guard: \"shouldRestoreFocus\",\n                target: \"focused\",\n                actions: [\"invokeOnClose\", \"setReturnFocus\"]\n              },\n              {\n                target: \"idle\",\n                actions: [\"invokeOnClose\"]\n              }\n            ],\n            CLOSE: [\n              {\n                guard: \"isOpenControlled\",\n                actions: [\"invokeOnClose\"]\n              },\n              {\n                target: \"idle\",\n                actions: [\"invokeOnClose\"]\n              }\n            ]\n          }\n        }\n      }\n    },\n    {\n      guards: {\n        closeOnSelect: (ctx2) => !!ctx2.closeOnSelect,\n        isOpenControlled: (ctx2) => !!ctx2[\"open.controlled\"],\n        shouldRestoreFocus: (ctx2) => !!ctx2.restoreFocus\n      },\n      activities: {\n        trackPositioning(ctx2) {\n          ctx2.currentPlacement = ctx2.positioning.placement;\n          const anchorEl = dom.getTriggerEl(ctx2);\n          const getPositionerEl = () => dom.getPositionerEl(ctx2);\n          return getPlacement(anchorEl, getPositionerEl, {\n            ...ctx2.positioning,\n            defer: true,\n            onComplete(data) {\n              ctx2.currentPlacement = data.placement;\n            }\n          });\n        },\n        trackDismissableElement(ctx2, _evt, { send }) {\n          const getContentEl = () => dom.getContentEl(ctx2);\n          return trackDismissableElement(getContentEl, {\n            exclude: dom.getTriggerEl(ctx2),\n            defer: true,\n            onInteractOutside(event) {\n              ctx2.onInteractOutside?.(event);\n              if (event.defaultPrevented) return;\n              ctx2.restoreFocus = !(event.detail.focusable || event.detail.contextmenu);\n            },\n            onPointerDownOutside: ctx2.onPointerDownOutside,\n            onFocusOutside: ctx2.onFocusOutside,\n            onDismiss() {\n              send({ type: \"INTERACT_OUTSIDE\" });\n            }\n          });\n        },\n        trackFormControl(ctx2, _evt, { send, initialContext }) {\n          const inputEl = dom.getHiddenInputEl(ctx2);\n          return trackFormControl(inputEl, {\n            onFieldsetDisabledChange(disabled) {\n              ctx2.fieldsetDisabled = disabled;\n            },\n            onFormReset() {\n              send({ type: \"VALUE.SET\", value: initialContext.value, src: \"form.reset\" });\n            }\n          });\n        },\n        trackPointerMove(ctx2, evt, { send }) {\n          return trackPointerMove(dom.getDoc(ctx2), {\n            onPointerMove({ point }) {\n              const type = ctx2.activeId === \"area\" ? \"AREA.POINTER_MOVE\" : \"CHANNEL_SLIDER.POINTER_MOVE\";\n              send({ type, point, format: evt.format });\n            },\n            onPointerUp() {\n              const type = ctx2.activeId === \"area\" ? \"AREA.POINTER_UP\" : \"CHANNEL_SLIDER.POINTER_UP\";\n              send({ type });\n            }\n          });\n        },\n        disableTextSelection(ctx2) {\n          return disableTextSelection({ doc: dom.getDoc(ctx2), target: dom.getContentEl(ctx2) });\n        }\n      },\n      actions: {\n        openEyeDropper(ctx2) {\n          const isSupported = \"EyeDropper\" in dom.getWin(ctx2);\n          if (!isSupported) return;\n          const win = dom.getWin(ctx2);\n          const picker = new win.EyeDropper();\n          picker.open().then(({ sRGBHex }) => {\n            const format = ctx2.value.getFormat();\n            const color = parseColor(sRGBHex).toFormat(format);\n            set.value(ctx2, color);\n            ctx2.onValueChangeEnd?.({ value: ctx2.value, valueAsString: ctx2.valueAsString });\n          }).catch(() => void 0);\n        },\n        setActiveChannel(ctx2, evt) {\n          ctx2.activeId = evt.id;\n          if (evt.channel) ctx2.activeChannel = evt.channel;\n          if (evt.orientation) ctx2.activeOrientation = evt.orientation;\n        },\n        clearActiveChannel(ctx2) {\n          ctx2.activeChannel = null;\n          ctx2.activeId = null;\n          ctx2.activeOrientation = null;\n        },\n        setAreaColorFromPoint(ctx2, evt) {\n          const normalizedValue = evt.format ? ctx2.value.toFormat(evt.format) : ctx2.areaValue;\n          const { xChannel, yChannel } = evt.channel || ctx2.activeChannel;\n          const percent = dom.getAreaValueFromPoint(ctx2, evt.point);\n          if (!percent) return;\n          const xValue = normalizedValue.getChannelPercentValue(xChannel, percent.x);\n          const yValue = normalizedValue.getChannelPercentValue(yChannel, 1 - percent.y);\n          const color = normalizedValue.withChannelValue(xChannel, xValue).withChannelValue(yChannel, yValue);\n          set.value(ctx2, color);\n        },\n        setChannelColorFromPoint(ctx2, evt) {\n          const channel = evt.channel || ctx2.activeId;\n          const normalizedValue = evt.format ? ctx2.value.toFormat(evt.format) : ctx2.areaValue;\n          const percent = dom.getChannelSliderValueFromPoint(ctx2, evt.point, channel);\n          if (!percent) return;\n          const orientation = ctx2.activeOrientation || \"horizontal\";\n          const channelPercent = orientation === \"horizontal\" ? percent.x : percent.y;\n          const value = normalizedValue.getChannelPercentValue(channel, channelPercent);\n          const color = normalizedValue.withChannelValue(channel, value);\n          set.value(ctx2, color);\n        },\n        setValue(ctx2, evt) {\n          set.value(ctx2, evt.value);\n        },\n        setFormat(ctx2, evt) {\n          set.format(ctx2, evt.format);\n        },\n        syncInputElements(ctx2) {\n          sync.inputs(ctx2);\n        },\n        invokeOnChangeEnd(ctx2) {\n          invoke.changeEnd(ctx2);\n        },\n        setChannelColorFromInput(ctx2, evt) {\n          const { channel, isTextField, value } = evt;\n          const currentAlpha = ctx2.value.getChannelValue(\"alpha\");\n          let color;\n          if (channel === \"alpha\") {\n            let valueAsNumber = parseFloat(value);\n            valueAsNumber = Number.isNaN(valueAsNumber) ? currentAlpha : valueAsNumber;\n            color = ctx2.value.withChannelValue(\"alpha\", valueAsNumber);\n          } else if (isTextField) {\n            color = tryCatch(\n              () => parse(value).withChannelValue(\"alpha\", currentAlpha),\n              () => ctx2.value\n            );\n          } else {\n            const current = ctx2.value.toFormat(ctx2.format);\n            const valueAsNumber = Number.isNaN(value) ? current.getChannelValue(channel) : value;\n            color = current.withChannelValue(channel, valueAsNumber);\n          }\n          sync.inputs(ctx2, color);\n          set.value(ctx2, color);\n        },\n        incrementChannel(ctx2, evt) {\n          const color = ctx2.value.incrementChannel(evt.channel, evt.step);\n          set.value(ctx2, color);\n        },\n        decrementChannel(ctx2, evt) {\n          const color = ctx2.value.decrementChannel(evt.channel, evt.step);\n          set.value(ctx2, color);\n        },\n        incrementAreaXChannel(ctx2, evt) {\n          const { xChannel } = evt.channel;\n          const color = ctx2.areaValue.incrementChannel(xChannel, evt.step);\n          set.value(ctx2, color);\n        },\n        decrementAreaXChannel(ctx2, evt) {\n          const { xChannel } = evt.channel;\n          const color = ctx2.areaValue.decrementChannel(xChannel, evt.step);\n          set.value(ctx2, color);\n        },\n        incrementAreaYChannel(ctx2, evt) {\n          const { yChannel } = evt.channel;\n          const color = ctx2.areaValue.incrementChannel(yChannel, evt.step);\n          set.value(ctx2, color);\n        },\n        decrementAreaYChannel(ctx2, evt) {\n          const { yChannel } = evt.channel;\n          const color = ctx2.areaValue.decrementChannel(yChannel, evt.step);\n          set.value(ctx2, color);\n        },\n        setChannelToMax(ctx2, evt) {\n          const range = ctx2.value.getChannelRange(evt.channel);\n          const color = ctx2.value.withChannelValue(evt.channel, range.maxValue);\n          set.value(ctx2, color);\n        },\n        setChannelToMin(ctx2, evt) {\n          const range = ctx2.value.getChannelRange(evt.channel);\n          const color = ctx2.value.withChannelValue(evt.channel, range.minValue);\n          set.value(ctx2, color);\n        },\n        focusAreaThumb(ctx2) {\n          raf(() => {\n            dom.getAreaThumbEl(ctx2)?.focus({ preventScroll: true });\n          });\n        },\n        focusChannelThumb(ctx2, evt) {\n          raf(() => {\n            dom.getChannelSliderThumbEl(ctx2, evt.channel)?.focus({ preventScroll: true });\n          });\n        },\n        setInitialFocus(ctx2) {\n          raf(() => {\n            const element = getInitialFocus({\n              root: dom.getContentEl(ctx2),\n              getInitialEl: ctx2.initialFocusEl\n            });\n            element?.focus({ preventScroll: true });\n          });\n        },\n        setReturnFocus(ctx2) {\n          raf(() => {\n            dom.getTriggerEl(ctx2)?.focus({ preventScroll: true });\n          });\n        },\n        syncFormatSelectElement(ctx2) {\n          sync.formatSelect(ctx2);\n        },\n        invokeOnOpen(ctx2) {\n          ctx2.onOpenChange?.({ open: true });\n        },\n        invokeOnClose(ctx2) {\n          ctx2.onOpenChange?.({ open: false });\n        },\n        toggleVisibility(ctx2, evt, { send }) {\n          send({ type: ctx2.open ? \"CONTROLLED.OPEN\" : \"CONTROLLED.CLOSE\", previousEvent: evt });\n        }\n      },\n      compareFns: {\n        value: (a, b) => a.isEqual(b)\n      }\n    }\n  );\n}\nvar sync = {\n  // sync channel inputs\n  inputs(ctx, color) {\n    const channelInputs = dom.getChannelInputEls(ctx);\n    raf(() => {\n      channelInputs.forEach((inputEl) => {\n        const channel = inputEl.dataset.channel;\n        dom.setValue(inputEl, getChannelValue(color || ctx.value, channel));\n      });\n    });\n  },\n  // sync format select\n  formatSelect(ctx) {\n    const selectEl = dom.getFormatSelectEl(ctx);\n    raf(() => {\n      dom.setValue(selectEl, ctx.format);\n    });\n  }\n};\nvar invoke = {\n  changeEnd(ctx) {\n    const value = ctx.value.toFormat(ctx.format);\n    ctx.onValueChangeEnd?.({\n      value,\n      valueAsString: ctx.valueAsString\n    });\n  },\n  change(ctx) {\n    const value = ctx.value.toFormat(ctx.format);\n    ctx.onValueChange?.({\n      value,\n      valueAsString: ctx.valueAsString\n    });\n    dispatchInputValueEvent(dom.getHiddenInputEl(ctx), { value: ctx.valueAsString });\n  },\n  formatChange(ctx) {\n    ctx.onFormatChange?.({ format: ctx.format });\n  }\n};\nvar set = {\n  value(ctx, color) {\n    if (!color || ctx.value.isEqual(color)) return;\n    ctx.value = color;\n    invoke.change(ctx);\n  },\n  format(ctx, format) {\n    if (ctx.format === format) return;\n    ctx.format = format;\n    invoke.formatChange(ctx);\n  }\n};\n\nexport { anatomy, connect, machine, parse };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}