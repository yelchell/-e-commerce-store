{"ast":null,"code":"var _jsxFileName = \"D:\\\\assignment\\\\e_commerce\\\\ecommerce-product-page\\\\src\\\\components\\\\productpicker.js\",\n  _s = $RefreshSig$();\n// // src/components/ProductPickerDialog.js\n// import React, { useState, useEffect } from 'react';\n// import Modal from 'react-bootstrap/Modal';\n// import Table from 'react-bootstrap/Table';\n// import Form from 'react-bootstrap/Form';\n// import Button from 'react-bootstrap/Button';\n// import Image from 'react-bootstrap/Image';\n// import axios from 'axios';\n\n// const ProductPickerDialog = ({ show, onClose, onProductSelect }) => {\n//     const [searchTerm, setSearchTerm] = useState('');\n//     const [products, setProducts] = useState([]);\n//     const [selectedProducts, setSelectedProducts] = useState([]);\n//     const [selectedVariants, setSelectedVariants] = useState([]);\n//     console.log()\n//     useEffect(() => {\n//         if (searchTerm) {\n//             fetchProducts(searchTerm);\n//         }\n//     }, [searchTerm]);\n\n//     useEffect(() => {\n//         if (show) {\n//             setSearchTerm('');\n//             setProducts([]);\n//         }\n//     }, [show]);\n\n//     const fetchProducts = async (search) => {\n//         try {\n//             const response = await axios.get(\n//                 `/task/products/search`,\n//                 {\n//                     params: { search, page: 1, limit: 10 },\n//                     headers: {\n//                         'x-api-key': '72njgfa948d9aS7gs5'  // Replace with your actual API key\n//                     }\n//                 });\n//             if (response) {\n//                 setProducts(response.data);\n\n//             } else {\n//                 setProducts([])\n//             }\n//         } catch (error) {\n//             console.error('Error fetching products:', error);\n//         }\n//     };\n\n//     const handleSelectProduct = (product) => {\n//         const isSelected = selectedProducts.includes(product);\n//         if (isSelected) {\n//             setSelectedProducts(selectedProducts.filter(p => p.id !== product.id));\n//         } else {\n//             setSelectedProducts([...selectedProducts, product]);\n//         }\n//     };\n\n//     const handleAddProducts = () => {\n//         onProductSelect(selectedProducts);\n//         onClose();\n//     };\n\n//     const handleSelectVariant = (variant) => {\n//         const isSelected = selectedVariants.some(v => v.id === variant.id);\n//         if (isSelected) {\n//             setSelectedVariants(selectedVariants.filter(v => v.id !== variant.id));\n//         } else {\n//             setSelectedVariants([...selectedVariants, variant]);\n//         }\n//     };\n\n//     return (\n//         <Modal show={show} onHide={onClose} size=\"lg\" centered>\n//             <Modal.Header closeButton>\n//                 <Modal.Title>Select Products</Modal.Title>\n//             </Modal.Header>\n//             <Modal.Body>\n//                 <Form.Control\n//                     type=\"text\"\n//                     placeholder=\"Search product\"\n//                     value={searchTerm}\n//                     onChange={(e) => setSearchTerm(e.target.value)}\n//                     className=\"mb-3\"\n//                 />\n//                 <Table bordered>\n//                     <thead>\n//                         <tr>\n//                             <th></th>\n//                             <th>Product</th>\n//                             <th>Variants</th>\n//                             <th>Price</th>\n//                         </tr>\n//                     </thead>\n//                     <tbody>\n//                         {products ? products.map((product) => (\n//                             <React.Fragment key={product.id}>\n//                                 <tr>\n//                                     <td>\n//                                         <Form.Check\n//                                             type=\"checkbox\"\n//                                             checked={selectedProducts.includes(product)}\n//                                             onChange={() => handleSelectProduct(product)}\n//                                         />\n//                                     </td>\n//                                     <td>\n//                                         <Image src={product.image.src} thumbnail width={50} />{' '}\n//                                         {product.title}\n//                                     </td>\n//                                     <td colSpan=\"2\">\n//                                         {product.variants.map((variant) => (\n//                                             <div key={variant.id}>\n//                                                 <tr key={variant.id}>\n//                                                     <td></td>\n//                                                     <td></td>\n//                                                     <td>\n//                                                         <Form.Check\n//                                                             type=\"checkbox\"\n//                                                             checked={selectedVariants.some(v => v.id === variant.id)}\n//                                                             onChange={() => handleSelectVariant(variant)}\n//                                                         />\n//                                                         {variant.title}\n//                                                     </td>\n//                                                     <td>${variant.price}</td>\n//                                                 </tr>\n//                                             </div>\n//                                         ))}\n//                                     </td>\n//                                 </tr>\n//                             </React.Fragment>\n//                         )) : <>No products found..</>}\n//                     </tbody>\n//                 </Table>\n//             </Modal.Body>\n//             <Modal.Footer>\n//                 <Button variant=\"secondary\" onClick={onClose}>\n//                     Cancel\n//                 </Button>\n//                 <Button variant=\"primary\" onClick={handleAddProducts}>\n//                     Add\n//                 </Button>\n//             </Modal.Footer>\n//         </Modal>\n//     );\n// };\n\n// export default ProductPickerDialog;\n\n// src/components/ProductPickerDialog.js\nimport React, { useState, useEffect } from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport Table from 'react-bootstrap/Table';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Image from 'react-bootstrap/Image';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProductPickerDialog = ({\n  show,\n  onClose,\n  onProductSelect\n}) => {\n  _s();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [products, setProducts] = useState([]);\n  const [selectedProducts, setSelectedProducts] = useState([]);\n  const [selectedVariants, setSelectedVariants] = useState([]);\n  useEffect(() => {\n    if (searchTerm) {\n      fetchProducts(searchTerm);\n    }\n  }, [searchTerm]);\n  useEffect(() => {\n    if (show) {\n      setSearchTerm('');\n      setProducts([]);\n      setSelectedProducts([]); // Clear previously selected products\n      setSelectedVariants([]); // Clear previously selected variants\n    }\n  }, [show]);\n  const fetchProducts = async search => {\n    try {\n      const response = await axios.get(`/task/products/search`, {\n        params: {\n          search,\n          page: 1,\n          limit: 10\n        },\n        headers: {\n          'x-api-key': '72njgfa948d9aS7gs5' // Replace with your actual API key\n        }\n      });\n      setProducts(response.data || []);\n    } catch (error) {\n      console.error('Error fetching products:', error);\n    }\n  };\n  const handleSelectProduct = product => {\n    const isSelected = selectedProducts.includes(product);\n    if (isSelected) {\n      // Deselect product and its variants\n      setSelectedProducts(selectedProducts.filter(p => p.id !== product.id));\n      setSelectedVariants(selectedVariants.filter(v => v.product_id !== product.id));\n    } else {\n      // Select product and all its variants\n      setSelectedProducts([...selectedProducts, product]);\n      setSelectedVariants([...selectedVariants, ...product.variants.map(variant => ({\n        ...variant,\n        product_id: product.id\n      }))]);\n    }\n  };\n  const handleSelectVariant = (variant, product) => {\n    const isSelected = selectedVariants.some(v => v.id === variant.id);\n    if (isSelected) {\n      // Deselect the variant\n      setSelectedVariants(selectedVariants.filter(v => v.id !== variant.id));\n\n      // If no more variants of this product are selected, deselect the product as well\n      const remainingVariants = selectedVariants.filter(v => v.product_id === product.id && v.id !== variant.id);\n      if (remainingVariants.length === 0) {\n        setSelectedProducts(selectedProducts.filter(p => p.id !== product.id));\n      }\n    } else {\n      // Select the variant\n      setSelectedVariants([...selectedVariants, variant]);\n\n      // If the product is not selected, select it as well\n      if (!selectedProducts.includes(product)) {\n        setSelectedProducts([...selectedProducts, product]);\n      }\n    }\n  };\n  const handleAddProducts = () => {\n    onProductSelect(selectedProducts, selectedVariants);\n    onClose();\n  };\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    show: show,\n    onHide: onClose,\n    size: \"lg\",\n    centered: true,\n    children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n      closeButton: true,\n      children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n        children: \"Select Products\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n      children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n        type: \"text\",\n        placeholder: \"Search product\",\n        value: searchTerm,\n        onChange: e => setSearchTerm(e.target.value),\n        className: \"mb-3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Table, {\n        bordered: true,\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Product\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Variants\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Price\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 261,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: products.length > 0 ? products.map(product => /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(Form.Check, {\n                  type: \"checkbox\",\n                  checked: selectedProducts.includes(product),\n                  onChange: () => handleSelectProduct(product)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 269,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 268,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [/*#__PURE__*/_jsxDEV(Image, {\n                  src: product.image.src,\n                  thumbnail: true,\n                  width: 50\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 276,\n                  columnNumber: 41\n                }, this), ' ', product.title]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 275,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                colSpan: \"2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 279,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 267,\n              columnNumber: 33\n            }, this), product.variants.map(variant => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 283,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 284,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [/*#__PURE__*/_jsxDEV(Form.Check, {\n                  type: \"checkbox\",\n                  checked: selectedVariants.some(v => v.id === variant.id),\n                  onChange: () => handleSelectVariant(variant, product)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 286,\n                  columnNumber: 45\n                }, this), variant.title]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 285,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [\"$\", variant.price]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 293,\n                columnNumber: 41\n              }, this)]\n            }, variant.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 282,\n              columnNumber: 37\n            }, this))]\n          }, product.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 29\n          }, this)) : /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: /*#__PURE__*/_jsxDEV(\"td\", {\n              colSpan: \"4\",\n              className: \"text-center\",\n              children: \"No products found.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 299,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"secondary\",\n        onClick: onClose,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        onClick: handleAddProducts,\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 243,\n    columnNumber: 9\n  }, this);\n};\n_s(ProductPickerDialog, \"mVElziUwTCNlUp+F9p8hWxOy+qI=\");\n_c = ProductPickerDialog;\nexport default ProductPickerDialog;\nvar _c;\n$RefreshReg$(_c, \"ProductPickerDialog\");","map":{"version":3,"names":["React","useState","useEffect","Modal","Table","Form","Button","Image","axios","jsxDEV","_jsxDEV","ProductPickerDialog","show","onClose","onProductSelect","_s","searchTerm","setSearchTerm","products","setProducts","selectedProducts","setSelectedProducts","selectedVariants","setSelectedVariants","fetchProducts","search","response","get","params","page","limit","headers","data","error","console","handleSelectProduct","product","isSelected","includes","filter","p","id","v","product_id","variants","map","variant","handleSelectVariant","some","remainingVariants","length","handleAddProducts","onHide","size","centered","children","Header","closeButton","Title","fileName","_jsxFileName","lineNumber","columnNumber","Body","Control","type","placeholder","value","onChange","e","target","className","bordered","Fragment","Check","checked","src","image","thumbnail","width","title","colSpan","price","Footer","onClick","_c","$RefreshReg$"],"sources":["D:/assignment/e_commerce/ecommerce-product-page/src/components/productpicker.js"],"sourcesContent":["// // src/components/ProductPickerDialog.js\r\n// import React, { useState, useEffect } from 'react';\r\n// import Modal from 'react-bootstrap/Modal';\r\n// import Table from 'react-bootstrap/Table';\r\n// import Form from 'react-bootstrap/Form';\r\n// import Button from 'react-bootstrap/Button';\r\n// import Image from 'react-bootstrap/Image';\r\n// import axios from 'axios';\r\n\r\n// const ProductPickerDialog = ({ show, onClose, onProductSelect }) => {\r\n//     const [searchTerm, setSearchTerm] = useState('');\r\n//     const [products, setProducts] = useState([]);\r\n//     const [selectedProducts, setSelectedProducts] = useState([]);\r\n//     const [selectedVariants, setSelectedVariants] = useState([]);\r\n//     console.log()\r\n//     useEffect(() => {\r\n//         if (searchTerm) {\r\n//             fetchProducts(searchTerm);\r\n//         }\r\n//     }, [searchTerm]);\r\n\r\n//     useEffect(() => {\r\n//         if (show) {\r\n//             setSearchTerm('');\r\n//             setProducts([]);\r\n//         }\r\n//     }, [show]);\r\n\r\n//     const fetchProducts = async (search) => {\r\n//         try {\r\n//             const response = await axios.get(\r\n//                 `/task/products/search`,\r\n//                 {\r\n//                     params: { search, page: 1, limit: 10 },\r\n//                     headers: {\r\n//                         'x-api-key': '72njgfa948d9aS7gs5'  // Replace with your actual API key\r\n//                     }\r\n//                 });\r\n//             if (response) {\r\n//                 setProducts(response.data);\r\n\r\n//             } else {\r\n//                 setProducts([])\r\n//             }\r\n//         } catch (error) {\r\n//             console.error('Error fetching products:', error);\r\n//         }\r\n//     };\r\n\r\n//     const handleSelectProduct = (product) => {\r\n//         const isSelected = selectedProducts.includes(product);\r\n//         if (isSelected) {\r\n//             setSelectedProducts(selectedProducts.filter(p => p.id !== product.id));\r\n//         } else {\r\n//             setSelectedProducts([...selectedProducts, product]);\r\n//         }\r\n//     };\r\n\r\n//     const handleAddProducts = () => {\r\n//         onProductSelect(selectedProducts);\r\n//         onClose();\r\n//     };\r\n\r\n//     const handleSelectVariant = (variant) => {\r\n//         const isSelected = selectedVariants.some(v => v.id === variant.id);\r\n//         if (isSelected) {\r\n//             setSelectedVariants(selectedVariants.filter(v => v.id !== variant.id));\r\n//         } else {\r\n//             setSelectedVariants([...selectedVariants, variant]);\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <Modal show={show} onHide={onClose} size=\"lg\" centered>\r\n//             <Modal.Header closeButton>\r\n//                 <Modal.Title>Select Products</Modal.Title>\r\n//             </Modal.Header>\r\n//             <Modal.Body>\r\n//                 <Form.Control\r\n//                     type=\"text\"\r\n//                     placeholder=\"Search product\"\r\n//                     value={searchTerm}\r\n//                     onChange={(e) => setSearchTerm(e.target.value)}\r\n//                     className=\"mb-3\"\r\n//                 />\r\n//                 <Table bordered>\r\n//                     <thead>\r\n//                         <tr>\r\n//                             <th></th>\r\n//                             <th>Product</th>\r\n//                             <th>Variants</th>\r\n//                             <th>Price</th>\r\n//                         </tr>\r\n//                     </thead>\r\n//                     <tbody>\r\n//                         {products ? products.map((product) => (\r\n//                             <React.Fragment key={product.id}>\r\n//                                 <tr>\r\n//                                     <td>\r\n//                                         <Form.Check\r\n//                                             type=\"checkbox\"\r\n//                                             checked={selectedProducts.includes(product)}\r\n//                                             onChange={() => handleSelectProduct(product)}\r\n//                                         />\r\n//                                     </td>\r\n//                                     <td>\r\n//                                         <Image src={product.image.src} thumbnail width={50} />{' '}\r\n//                                         {product.title}\r\n//                                     </td>\r\n//                                     <td colSpan=\"2\">\r\n//                                         {product.variants.map((variant) => (\r\n//                                             <div key={variant.id}>\r\n//                                                 <tr key={variant.id}>\r\n//                                                     <td></td>\r\n//                                                     <td></td>\r\n//                                                     <td>\r\n//                                                         <Form.Check\r\n//                                                             type=\"checkbox\"\r\n//                                                             checked={selectedVariants.some(v => v.id === variant.id)}\r\n//                                                             onChange={() => handleSelectVariant(variant)}\r\n//                                                         />\r\n//                                                         {variant.title}\r\n//                                                     </td>\r\n//                                                     <td>${variant.price}</td>\r\n//                                                 </tr>\r\n//                                             </div>\r\n//                                         ))}\r\n//                                     </td>\r\n//                                 </tr>\r\n//                             </React.Fragment>\r\n//                         )) : <>No products found..</>}\r\n//                     </tbody>\r\n//                 </Table>\r\n//             </Modal.Body>\r\n//             <Modal.Footer>\r\n//                 <Button variant=\"secondary\" onClick={onClose}>\r\n//                     Cancel\r\n//                 </Button>\r\n//                 <Button variant=\"primary\" onClick={handleAddProducts}>\r\n//                     Add\r\n//                 </Button>\r\n//             </Modal.Footer>\r\n//         </Modal>\r\n//     );\r\n// };\r\n\r\n// export default ProductPickerDialog;\r\n\r\n\r\n\r\n// src/components/ProductPickerDialog.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Table from 'react-bootstrap/Table';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Image from 'react-bootstrap/Image';\r\nimport axios from 'axios';\r\n\r\nconst ProductPickerDialog = ({ show, onClose, onProductSelect }) => {\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [products, setProducts] = useState([]);\r\n    const [selectedProducts, setSelectedProducts] = useState([]);\r\n    const [selectedVariants, setSelectedVariants] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if (searchTerm) {\r\n            fetchProducts(searchTerm);\r\n        }\r\n    }, [searchTerm]);\r\n\r\n    useEffect(() => {\r\n        if (show) {\r\n            setSearchTerm('');\r\n            setProducts([]);\r\n            setSelectedProducts([]); // Clear previously selected products\r\n            setSelectedVariants([]); // Clear previously selected variants\r\n        }\r\n    }, [show]);\r\n\r\n    const fetchProducts = async (search) => {\r\n        try {\r\n            const response = await axios.get(\r\n                `/task/products/search`,\r\n                {\r\n                    params: { search, page: 1, limit: 10 },\r\n                    headers: {\r\n                        'x-api-key': '72njgfa948d9aS7gs5'  // Replace with your actual API key\r\n                    }\r\n                });\r\n            setProducts(response.data || []);\r\n        } catch (error) {\r\n            console.error('Error fetching products:', error);\r\n        }\r\n    };\r\n\r\n    const handleSelectProduct = (product) => {\r\n        const isSelected = selectedProducts.includes(product);\r\n\r\n        if (isSelected) {\r\n            // Deselect product and its variants\r\n            setSelectedProducts(selectedProducts.filter(p => p.id !== product.id));\r\n            setSelectedVariants(selectedVariants.filter(v => v.product_id !== product.id));\r\n        } else {\r\n            // Select product and all its variants\r\n            setSelectedProducts([...selectedProducts, product]);\r\n            setSelectedVariants([\r\n                ...selectedVariants,\r\n                ...product.variants.map(variant => ({ ...variant, product_id: product.id }))\r\n            ]);\r\n        }\r\n    };\r\n\r\n    const handleSelectVariant = (variant, product) => {\r\n        const isSelected = selectedVariants.some(v => v.id === variant.id);\r\n\r\n        if (isSelected) {\r\n            // Deselect the variant\r\n            setSelectedVariants(selectedVariants.filter(v => v.id !== variant.id));\r\n\r\n            // If no more variants of this product are selected, deselect the product as well\r\n            const remainingVariants = selectedVariants.filter(v => v.product_id === product.id && v.id !== variant.id);\r\n            if (remainingVariants.length === 0) {\r\n                setSelectedProducts(selectedProducts.filter(p => p.id !== product.id));\r\n            }\r\n        } else {\r\n            // Select the variant\r\n            setSelectedVariants([...selectedVariants, variant]);\r\n\r\n            // If the product is not selected, select it as well\r\n            if (!selectedProducts.includes(product)) {\r\n                setSelectedProducts([...selectedProducts, product]);\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleAddProducts = () => {\r\n        onProductSelect(selectedProducts, selectedVariants);\r\n        onClose();\r\n    };\r\n\r\n    return (\r\n        <Modal show={show} onHide={onClose} size=\"lg\" centered>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Select Products</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form.Control\r\n                    type=\"text\"\r\n                    placeholder=\"Search product\"\r\n                    value={searchTerm}\r\n                    onChange={(e) => setSearchTerm(e.target.value)}\r\n                    className=\"mb-3\"\r\n                />\r\n                <Table bordered>\r\n                    <thead>\r\n                        <tr>\r\n                            <th></th>\r\n                            <th>Product</th>\r\n                            <th>Variants</th>\r\n                            <th>Price</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {products.length > 0 ? products.map((product) => (\r\n                            <React.Fragment key={product.id}>\r\n                                <tr>\r\n                                    <td>\r\n                                        <Form.Check\r\n                                            type=\"checkbox\"\r\n                                            checked={selectedProducts.includes(product)}\r\n                                            onChange={() => handleSelectProduct(product)}\r\n                                        />\r\n                                    </td>\r\n                                    <td>\r\n                                        <Image src={product.image.src} thumbnail width={50} />{' '}\r\n                                        {product.title}\r\n                                    </td>\r\n                                    <td colSpan=\"2\"></td>\r\n                                </tr>\r\n                                {product.variants.map((variant) => (\r\n                                    <tr key={variant.id}>\r\n                                        <td></td>\r\n                                        <td></td>\r\n                                        <td>\r\n                                            <Form.Check\r\n                                                type=\"checkbox\"\r\n                                                checked={selectedVariants.some(v => v.id === variant.id)}\r\n                                                onChange={() => handleSelectVariant(variant, product)}\r\n                                            />\r\n                                            {variant.title}\r\n                                        </td>\r\n                                        <td>${variant.price}</td>\r\n                                    </tr>\r\n                                ))}\r\n                            </React.Fragment>\r\n                        )) : (\r\n                            <tr>\r\n                                <td colSpan=\"4\" className=\"text-center\">\r\n                                    No products found.\r\n                                </td>\r\n                            </tr>\r\n                        )}\r\n                    </tbody>\r\n                </Table>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={onClose}>\r\n                    Cancel\r\n                </Button>\r\n                <Button variant=\"primary\" onClick={handleAddProducts}>\r\n                    Add\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default ProductPickerDialog;\r\n"],"mappingslD,OAAOC,KAAK,MAAM,uBAAuB;AACzC,OAAOC,KAAK,MAAM,uBAAuB;AACzC,OAAOC,IAAI,MAAM,sBAAsB;AACvC,OAAOC,MAAM,MAAM,wBAAwB;AAC3C,OAAOC,KAAK,MAAM,uBAAuB;AACzC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,mBAAmB,GAAGA,CAAC;EAAEC,IAAI;EAAEC,OAAO;EAAEC;AAAgB,CAAC,KAAK;EAAAC,EAAA;EAChE,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACiB,QAAQ,EAAEC,WAAW,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACmB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EAC5D,MAAM,CAACqB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EAE5DC,SAAS,CAAC,MAAM;IACZ,IAAIc,UAAU,EAAE;MACZQ,aAAa,CAACR,UAAU,CAAC;IAC7B;EACJ,CAAC,EAAE,CAACA,UAAU,CAAC,CAAC;EAEhBd,SAAS,CAAC,MAAM;IACZ,IAAIU,IAAI,EAAE;MACNK,aAAa,CAAC,EAAE,CAAC;MACjBE,WAAW,CAAC,EAAE,CAAC;MACfE,mBAAmB,CAAC,EAAE,CAAC,CAAC,CAAC;MACzBE,mBAAmB,CAAC,EAAE,CAAC,CAAC,CAAC;IAC7B;EACJ,CAAC,EAAE,CAACX,IAAI,CAAC,CAAC;EAEV,MAAMY,aAAa,GAAG,MAAOC,MAAM,IAAK;IACpC,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMlB,KAAK,CAACmB,GAAG,CAC5B,uBAAuB,EACvB;QACIC,MAAM,EAAE;UAAEH,MAAM;UAAEI,IAAI,EAAE,CAAC;UAAEC,KAAK,EAAE;QAAG,CAAC;QACtCC,OAAO,EAAE;UACL,WAAW,EAAE,oBAAoB,CAAE;QACvC;MACJ,CAAC,CAAC;MACNZ,WAAW,CAACO,QAAQ,CAACM,IAAI,IAAI,EAAE,CAAC;IACpC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IACpD;EACJ,CAAC;EAED,MAAME,mBAAmB,GAAIC,OAAO,IAAK;IACrC,MAAMC,UAAU,GAAGjB,gBAAgB,CAACkB,QAAQ,CAACF,OAAO,CAAC;IAErD,IAAIC,UAAU,EAAE;MACZ;MACAhB,mBAAmB,CAACD,gBAAgB,CAACmB,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKL,OAAO,CAACK,EAAE,CAAC,CAAC;MACtElB,mBAAmB,CAACD,gBAAgB,CAACiB,MAAM,CAACG,CAAC,IAAIA,CAAC,CAACC,UAAU,KAAKP,OAAO,CAACK,EAAE,CAAC,CAAC;IAClF,CAAC,MAAM;MACH;MACApB,mBAAmB,CAAC,CAAC,GAAGD,gBAAgB,EAAEgB,OAAO,CAAC,CAAC;MACnDb,mBAAmB,CAAC,CAChB,GAAGD,gBAAgB,EACnB,GAAGc,OAAO,CAACQ,QAAQ,CAACC,GAAG,CAACC,OAAO,KAAK;QAAE,GAAGA,OAAO;QAAEH,UAAU,EAAEP,OAAO,CAACK;MAAG,CAAC,CAAC,CAAC,CAC/E,CAAC;IACN;EACJ,CAAC;EAED,MAAMM,mBAAmB,GAAGA,CAACD,OAAO,EAAEV,OAAO,KAAK;IAC9C,MAAMC,UAAU,GAAGf,gBAAgB,CAAC0B,IAAI,CAACN,CAAC,IAAIA,CAAC,CAACD,EAAE,KAAKK,OAAO,CAACL,EAAE,CAAC;IAElE,IAAIJ,UAAU,EAAE;MACZ;MACAd,mBAAmB,CAACD,gBAAgB,CAACiB,MAAM,CAACG,CAAC,IAAIA,CAAC,CAACD,EAAE,KAAKK,OAAO,CAACL,EAAE,CAAC,CAAC;;MAEtE;MACA,MAAMQ,iBAAiB,GAAG3B,gBAAgB,CAACiB,MAAM,CAACG,CAAC,IAAIA,CAAC,CAACC,UAAU,KAAKP,OAAO,CAACK,EAAE,IAAIC,CAAC,CAACD,EAAE,KAAKK,OAAO,CAACL,EAAE,CAAC;MAC1G,IAAIQ,iBAAiB,CAACC,MAAM,KAAK,CAAC,EAAE;QAChC7B,mBAAmB,CAACD,gBAAgB,CAACmB,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKL,OAAO,CAACK,EAAE,CAAC,CAAC;MAC1E;IACJ,CAAC,MAAM;MACH;MACAlB,mBAAmB,CAAC,CAAC,GAAGD,gBAAgB,EAAEwB,OAAO,CAAC,CAAC;;MAEnD;MACA,IAAI,CAAC1B,gBAAgB,CAACkB,QAAQ,CAACF,OAAO,CAAC,EAAE;QACrCf,mBAAmB,CAAC,CAAC,GAAGD,gBAAgB,EAAEgB,OAAO,CAAC,CAAC;MACvD;IACJ;EACJ,CAAC;EAED,MAAMe,iBAAiB,GAAGA,CAAA,KAAM;IAC5BrC,eAAe,CAACM,gBAAgB,EAAEE,gBAAgB,CAAC;IACnDT,OAAO,CAAC,CAAC;EACb,CAAC;EAED,oBACIH,OAAA,CAACP,KAAK;IAACS,IAAI,EAAEA,IAAK;IAACwC,MAAM,EAAEvC,OAAQ;IAACwC,IAAI,EAAC,IAAI;IAACC,QAAQ;IAAAC,QAAA,gBAClD7C,OAAA,CAACP,KAAK,CAACqD,MAAM;MAACC,WAAW;MAAAF,QAAA,eACrB7C,OAAA,CAACP,KAAK,CAACuD,KAAK;QAAAH,QAAA,EAAC;MAAe;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAa;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChC,CAAC,eACfpD,OAAA,CAACP,KAAK,CAAC4D,IAAI;MAAAR,QAAA,gBACP7C,OAAA,CAACL,IAAI,CAAC2D,OAAO;QACTC,IAAI,EAAC,MAAM;QACXC,WAAW,EAAC,gBAAgB;QAC5BC,KAAK,EAAEnD,UAAW;QAClBoD,QAAQ,EAAGC,CAAC,IAAKpD,aAAa,CAACoD,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;QAC/CI,SAAS,EAAC;MAAM;QAAAZ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnB,CAAC,eACFpD,OAAA,CAACN,KAAK;QAACoE,QAAQ;QAAAjB,QAAA,gBACX7C,OAAA;UAAA6C,QAAA,eACI7C,OAAA;YAAA6C,QAAA,gBACI7C,OAAA;cAAAiD,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eACTpD,OAAA;cAAA6C,QAAA,EAAI;YAAO;cAAAI,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eAChBpD,OAAA;cAAA6C,QAAA,EAAI;YAAQ;cAAAI,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACjBpD,OAAA;cAAA6C,QAAA,EAAI;YAAK;cAAAI,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACd;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACF,CAAC,eACRpD,OAAA;UAAA6C,QAAA,EACKrC,QAAQ,CAACgC,MAAM,GAAG,CAAC,GAAGhC,QAAQ,CAAC2B,GAAG,CAAET,OAAO,iBACxC1B,OAAA,CAACV,KAAK,CAACyE,QAAQ;YAAAlB,QAAA,gBACX7C,OAAA;cAAA6C,QAAA,gBACI7C,OAAA;gBAAA6C,QAAA,eACI7C,OAAA,CAACL,IAAI,CAACqE,KAAK;kBACPT,IAAI,EAAC,UAAU;kBACfU,OAAO,EAAEvD,gBAAgB,CAACkB,QAAQ,CAACF,OAAO,CAAE;kBAC5CgC,QAAQ,EAAEA,CAAA,KAAMjC,mBAAmB,CAACC,OAAO;gBAAE;kBAAAuB,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAChD;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACF,CAAC,eACLpD,OAAA;gBAAA6C,QAAA,gBACI7C,OAAA,CAACH,KAAK;kBAACqE,GAAG,EAAExC,OAAO,CAACyC,KAAK,CAACD,GAAI;kBAACE,SAAS;kBAACC,KAAK,EAAE;gBAAG;kBAAApB,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAE,CAAC,EAAC,GAAG,EACzD1B,OAAO,CAAC4C,KAAK;cAAA;gBAAArB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACd,CAAC,eACLpD,OAAA;gBAAIuE,OAAO,EAAC;cAAG;gBAAAtB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACrB,CAAC,EACJ1B,OAAO,CAACQ,QAAQ,CAACC,GAAG,CAAEC,OAAO,iBAC1BpC,OAAA;cAAA6C,QAAA,gBACI7C,OAAA;gBAAAiD,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,eACTpD,OAAA;gBAAAiD,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,eACTpD,OAAA;gBAAA6C,QAAA,gBACI7C,OAAA,CAACL,IAAI,CAACqE,KAAK;kBACPT,IAAI,EAAC,UAAU;kBACfU,OAAO,EAAErD,gBAAgB,CAAC0B,IAAI,CAACN,CAAC,IAAIA,CAAC,CAACD,EAAE,KAAKK,OAAO,CAACL,EAAE,CAAE;kBACzD2B,QAAQ,EAAEA,CAAA,KAAMrB,mBAAmB,CAACD,OAAO,EAAEV,OAAO;gBAAE;kBAAAuB,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACzD,CAAC,EACDhB,OAAO,CAACkC,KAAK;cAAA;gBAAArB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACd,CAAC,eACLpD,OAAA;gBAAA6C,QAAA,GAAI,GAAC,EAACT,OAAO,CAACoC,KAAK;cAAA;gBAAAvB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC;YAAA,GAXpBhB,OAAO,CAACL,EAAE;cAAAkB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAYf,CACP,CAAC;UAAA,GA7Be1B,OAAO,CAACK,EAAE;YAAAkB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OA8Bf,CACnB,CAAC,gBACEpD,OAAA;YAAA6C,QAAA,eACI7C,OAAA;cAAIuE,OAAO,EAAC,GAAG;cAACV,SAAS,EAAC,aAAa;cAAAhB,QAAA,EAAC;YAExC;cAAAI,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACL;QACP;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,eACbpD,OAAA,CAACP,KAAK,CAACgF,MAAM;MAAA5B,QAAA,gBACT7C,OAAA,CAACJ,MAAM;QAACwC,OAAO,EAAC,WAAW;QAACsC,OAAO,EAAEvE,OAAQ;QAAA0C,QAAA,EAAC;MAE9C;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACTpD,OAAA,CAACJ,MAAM;QAACwC,OAAO,EAAC,SAAS;QAACsC,OAAO,EAAEjC,iBAAkB;QAAAI,QAAA,EAAC;MAEtD;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACZ,CAAC;AAEhB,CAAC;AAAC/C,EAAA,CA7JIJ,mBAAmB;AAAA0E,EAAA,GAAnB1E,mBAAmB;AA+JzB,eAAeA,mBAAmB;AAAC,IAAA0E,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}